"use strict";module.exports = validate10;module.exports.default = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://raw.githubusercontent.com/IEA-Task-43/digital_wra_data_standard/master/schema/iea43_wra_data_model.schema.json","definitions":{"date_from":{"type":"string","format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]},"measurement_type":{"type":"string","title":"Measurement Type","description":"The type of measurement been made. See more information in the examples.","enum":["wind_speed","wind_direction","air_temperature","water_temperature","temperature","air_pressure","air_density","relative_humidity","voltage","current","resistance","power","energy","vertical_wind_speed","wind_speed_turbulence","precipitation","ice_detection","global_horizontal_irradiance","direct_normal_irradiance","diffuse_horizontal_irradiance","global_tilted_irradiance","global_normal_irradiance","albedo","soiling_loss_index","illuminance","fog","salinity","conductivity","pressure","gps_coordinates","status","flag","counter","availability","quality","carrier_to_noise_ratio","doppler_spectral_broadening","echo_intensity","signal_to_noise_ratio","motion_corrected_wind_speed","motion_corrected_wind_direction","motion_corrected_vertical_wind_speed","wave_height","wave_significant_height","wave_maximum_height","wave_direction","wave_directional_spread","wave_period","wave_peak_period","water_speed","vertical_water_speed","water_direction","orientation","compass_direction","true_north_offset","tilt","tilt_x","tilt_y","tilt_z","u","v","w","elevation","altitude","height","azimuth","water_level","depth","timestamp","other"],"examples":["wind_speed  (the horizontal component of wind speed)","wind_direction  (the direction from which the wind is coming from)","air_temperature  (outdoor ambient temperature of the air)","water_temperature  (is the in situ temperature of the water. In CF Conventions this is equivalent to 'sea_water_temperature'.)","temperature  (the temperature of a body or indoor ambient air temperature)","air_pressure (outdoor pressure of the air)","air_density (the density of air)","relative_humidity (outdoor relative humidity of the air","voltage (electrical voltage, typically the logger battery voltage)","current (electrical current, typically the logger battery current)","resistance (electrical resistance, the raw or basic measurement from many different sensors)","power (the amount of energy transferred or converted per unit of time)","energy (in physics, is the capacity for doing work. It may exist in potential, kinetic, thermal, electrical, chemical, nuclear, or other various forms.)","vertical_wind_speed (the vertical component of wind speed)","wind_speed_turbulence (the turbulence of the wind speed)","precipitation (water which falls to the ground from the atmosphere in forms of rain, snow, sleet, ice pellets, dew, frost, and hail)","ice_detection (detection of ice build up on surfaces)","global_horizontal_irradiance (the total power or instantaneous rate of energy from the sun received by a horizontal surface on Earth)","direct_normal_irradiance (the direct line of sight power or instantaneous rate of energy from the sun, excluding diffuse irradiance, received by a surface on Earth perpendicular to the sun)","diffuse_horizontal_irradiance (the power or instantaneous rate of energy from light scattered by the atmosphere, excluding direct irradiance, received by a horizontal surface on Earth)","global_tilted_irradiance (the total power or instantaneous rate of energy from the sun received by a surface on Earth with defined tilt and azimuth, fixed or sun-tracking)","global_normal_irradiance (the total power or instantaneous rate of energy from the sun received by a surface on Earth perpendicular to the sun)","albedo (or reflected solar radiation from the earth's surface, is defined as the ratio between the reflected energy and the incident energy over a unit area)","soiling_loss_index (an index of lost energy between clean and dirty PV modules, https://www.campbellsci.com/cr-pvs1 )","illuminance (measure of visible light falling onto a per unit area, typically measured in lux)","fog (is a visible aerosol consisting of tiny water droplets or ice crystals suspended in the air at or near the Earth's surface)","salinity (is the salt content of water. In CF Conventions this is equivalent to 'sea_water_salinity', 'sea_water_practical_salinity' or 'sea_water_absolute_salinity' depending on the scale been used.)","conductivity (of an electrolyte solution, e.g. sea water, is a measure of its ability to conduct electricity. In CF Conventions this is equivalent to 'sea_water_electrical_conductivity' for offshore use cases.)","pressure (the pressure of a medium e.g. water. In CF Conventions this is equivalent to 'sea_water_pressure' for offshore use cases.)","gps_coordinates (latitude and/or longitude as measured by a gps)","status (a status flag or other to describe the status of a sensor or object)","counter (a simple counter)","availability (the availability of a sensor or the presence of something in a measurement typically measured as %, e.g. '40m Data Availability (%)' or 'Proportion Of Packets with Fog (%)'. This is currently a generic catch-all for all 'availability' like metrics and may be resolved into more specific definitions in future revisions.)","quality (a measure of the quality of a measurement)","carrier_to_noise_ratio (a measure of signal strength as measured by lidar devices, http://data.windenergy.dtu.dk/ontologies/view/IEATask32Glossary/en/page/parameters.carrier_to_noise_ratio )","doppler_spectral_broadening (as measured by lidar devices)","echo_intensity (is the brightness or brilliance of the acoustic echo usually measured by an ADCP. If from an ADCP, it can be used to judge the quality of measurement or estimate the amount of suspended sediment in the water column.)","signal_to_noise_ratio (a measure of signal strength as measured by ADCPs.)","motion_corrected_wind_speed (the horizontal component of wind speed which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","motion_corrected_wind_direction (the direction form which the wind is coming from which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","motion_corrected_vertical_wind_speed (the vertical component of wind speed which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","wave_height (is the mean wave height measured during the observation period, where the height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_mean_height'.)","wave_significant_height (is a statistic computed from wave measurements and corresponds to the average height of the highest one third of the waves, where the height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_significant_height'.)","wave_maximum_height (is the greatest trough to crest distance measured during the observation period. Wave height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_maximum_height'.)","wave_direction (the direction from which the wave is coming from. The direction is a bearing in the usual geographical sense, measured positive clockwise from due north. In CF Conventions this is equivalent to 'sea_surface_wave_from_direction'.)","wave_directional_spread (is the standard deviation of all the wave directions measured. It signifies how spread out,or how wide an area, all the waves are coming from. In CF Conventions this is equivalent to 'sea_surface_wave_directional_spread'.)","wave_period (is the mean wave period measured during the observation period at a specific location. In CF Conventions this is equivalent to 'sea_surface_wave_mean_period'.)","wave_peak_period (is the wave period of the most energetic waves in the total wave spectrum at a specific location. In CF Conventions this is equivalent to 'sea_surface_wave_period_at_variance_spectral_density_maximum'.)","water_speed (the horizontal magnitude of the water's velocity. This is sometimes also known as 'current speed' and in CF Conventions this is equivalent to 'sea_water_speed'.)","vertical_water_speed (the vertical magnitude of the water's velocity. In CF Conventions this is equivalent to 'upward_sea_water_velocity'.)","water_direction (the direction from which the water flow is coming from. The direction is a bearing in the usual geographical sense, measured positive clockwise from due north. This is sometimes also known as 'current direction' and in CF Conventions this is equivalent to 'sea_water_velocity_from_direction' or 'sea_water_from_direction'.)","orientation (the direction something points or faces relative to north or other specified positions)","compass_direction (the direction as measured by a compass, therefore referenced to magnetic north)","true_north_offset (the offset something points or faces relative to true north, e.g. from a solar compass such as a Geovane)","tilt_x (the tilt of an object relative to the x-axis)","tilt_y (the tilt of an object relative to the y-axis)","tilt_z (the tilt of an object relative to the z-axis)","u (the U component vector, relating to wind it is positive for a west to east flow (eastward wind), however, it can be used for other vectors. If so, please use the notes property to define it.)","v (the V component vector, relating to wind it is positive for a south to north flow (northward wind), however, it can be used for other vectors. If so, please use the notes property to define it.)","w (the W component vector, if using this for wind please use the 'vertical_wind_speed' measurement type. Please use the notes property to define how this component is utilised.","elevation (the height the surface of the earth is above mean sea level)","altitude (the height above mean sea level or is the angle between the sun and the observer's local horizon, also sometimes referred to as elevation)","height (the vertical distance above a particular reference e.g. ground level.)","azimuth (is the angle of the sun around the horizon, in the northern hemisphere this is usually measured from north and increasing eastward whereas in the southern hemisphere it can be measured from the south and increasing westward)","water_level (is the height of the sea surface above the sea floor. In CF Conventions this is equivalent, but opposite in respect of their point of reference, to 'sea_floor_depth_below_sea_surface'.)","depth (the vertical distance below a particular reference e.g. sea level.)","timestamp (the timestamp of when a measurement value was recorded)","other"]},"orientation_reference":{"type":["string","null"],"title":"Orientation Reference","description":"The orientation reference the item is measured against. E.g. magnetic north.","enum":["magnetic_north","true_north","grid_north",null]},"height_reference":{"type":["string","null"],"title":"Height Reference","description":"The height reference frame that is used to measure the item height. E.g. onshore this is 'ground level' i.e. the item is 0.5 m above ground level. Offshore is a bit different as it can be 20 m above 'mean sea level' or 20 m above 'lowest astronomical tide' for a fixed structure or 20 m above 'sea level' for a floating lidar.","enum":["ground_level","mean_sea_level","sea_level","lowest_astronomical_tide","sea_floor","other"],"default":"ground_level"}},"type":"object","title":"IEA Wind Resource Assessment - Data Model","description":"This Data Model schema is a digital representation of a meteorological mast used for measuring the wind resource of a potential wind farm.","properties":{"author":{"type":"string","title":"Author","description":"The person or system who created this data model representing a specific mast.","examples":["Stephen Holleran","Joe Bloggs"]},"organisation":{"type":"string","title":"Organisation","description":"The organisation the Author is from.","examples":["brightwind","Wind Developer Ltd."]},"date":{"type":"string","format":"date","title":"Date","description":"The date this file was created. Format should be YYYY-MM-DD","examples":["2020-07-28"]},"version":{"type":"string","title":"Version","description":"The version of the IEA WRA Data Model this file is based on. The format of this follows Semantic Versioning with the year and month tagged on after. E.g. 1.1.1-2020.07","examples":["0.1.0-2020.06","1.1.1-2020.07"],"pattern":"^([0-9]{1,2})[.]([0-9]{1,2})[.]([0-9]{1,2})-([0-9]{4})[.]([0-9]{2})$"},"plant_name":{"type":["string","null"],"title":"Plant Name","description":"The name of the wind farm this met mast is associated with.","examples":["A Name of Wind Farm"]},"plant_type":{"type":["string","null"],"title":"Plant Type","description":"The type of renewable generation plant it is.","enum":["null","onshore_wind","offshore_wind","solar"]},"measurement_location":{"type":"array","title":"Measurement Location","description":"This is the geographic location of the meteorological measurement station i.e. a met mast/tower or remote sensing device.","items":{"type":"object","title":"Measurement Location","properties":{"name":{"type":"string","title":"Name","description":"The name given to the measurement location i.e. to the met mast or remote sensing device.","examples":["AName_MM1"]},"latitude_ddeg":{"type":"number","title":"Latitude [ddeg]","description":"Latitude coordinate in the Geographic Coordinate System using the WGS84 reference coordinate system, [EPSG:4326](https://epsg.io/4326). Unit of measure is in decimal degrees. Latitude lines are parallel to the equator where their position ranges from -90 degrees at the south pole to 90 degrees at the north pole.","examples":[52.973],"minimum":-90,"maximum":90},"longitude_ddeg":{"type":"number","title":"Longitude [ddeg]","description":"Longitude coordinate in the Geographic Coordinate System using the WGS84 reference coordinate system, [EPSG:4326](https://epsg.io/4326). Unit of measure is in decimal degrees. Longitude lines are perpendicular to the equator where their position ranges from 0° at Greenwich Mean Time increasing to +180° as you move eastward and decreasing to −180° as you move westward.","examples":[-9.431],"minimum":-180,"maximum":180},"measurement_station_type_id":{"title":"Measurement Station Type","description":"The type of measurement station. This must be one of either met mast, lidar (a vertical profiler), sodar (also a vertical profiler) or floating lidar (floating vertical profiler lidar).","type":"string","enum":["mast","lidar","sodar","floating_lidar","solar"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]},"mast_properties":{"type":["object","null"],"title":"Mast Properties","description":"The properties of the installed met mast/tower. Additional properties can be added e.g. 'material' however this wouldn't be part of the Data Model. If an additional property is for information purposes please consider using 'notes' instead.","properties":{"mast_geometry_id":{"type":["string","null"],"title":"Mast Geometry","description":"The type of mast geometry e.g. lattice with a triangular profile or pole. The IEC specifies two square lattice towers as having rounded edges for their members or sharp edges.","enum":["lattice_triangle","lattice_square_round_edges","lattice_square_sharp_edges","pole",null]},"mast_oem":{"type":["string","null"],"title":"Mast OEM","description":"The manufacturer of the met mast.","examples":["NRG Systems","Galetech Energy Services"]},"mast_serial_number":{"type":["string","null"],"title":"Mast Serial Number","description":"The manufacturer's serial number of the mast.","examples":["XHD12345","MM01234"]},"mast_model":{"type":["string","null"],"title":"Mast Model","description":"The model of the mast.","examples":["80m XHD TallTower","SLX80m"]},"mast_height_m":{"type":["number","null"],"title":"Mast Height [m]","description":"The height of the mast itself, not necessarily the top anemometer height.","examples":[81.3]},"date_from":{"type":["string","null"],"format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]},"mast_section_geometry":{"type":["array","null"],"title":"Mast Section Geometry","description":"This contains the properties of each mast section. Additional properties can be added e.g. 'material' however this wouldn't be part of the Data Model. If an additional property is for information purposes please consider using 'notes' instead.","items":{"type":"object","title":"Mast Section Geometry","properties":{"uuid":{"type":["string","null"],"format":"uuid","title":"UUID","description":"The unique id to relate this mast section to the mounting arrangement. A UUID can be generated here https://www.uuidgenerator.net/","examples":["bf078172-bbb6-48fe-ac1f-c6605dffb1b5"]},"mast_section_height_mm":{"type":["number","null"],"title":"Mast Section Height [mm]","description":"Towers come in sections that are connected together to make a complete met mast. This is the height in mm of this met mast section.","examples":[6000]},"pole_diameter_mm":{"type":["number","null"],"title":"Pole Diameter [mm]","description":"If a pole mast is used, it's diameter in mm.","examples":[203]},"lattice_face_width_at_bottom_mm":{"type":["number","null"],"title":"Lattice Face Width at Bottom [mm]","description":"The lattice face width at the bottom of the mast section, as measured from leg centre to leg centre as outlined in [IEC 61400-12-1 2017 Fig G.5](https://user-images.githubusercontent.com/25622575/160807405-24f8ec74-e93f-4454-b41d-92ea30ffeb15.png).","examples":[500]},"lattice_face_width_at_top_mm":{"type":["number","null"],"title":"Lattice Face Width at Top [mm]","description":"The lattice face width at the top of the mast section, as measured from leg centre to leg centre as outlined in [IEC 61400-12-1 2017 Fig G.5](https://user-images.githubusercontent.com/25622575/160807405-24f8ec74-e93f-4454-b41d-92ea30ffeb15.png).","examples":[500]},"lattice_leg_width_mm":{"type":["number","null"],"title":"Lattice Leg Width [mm]","description":"The lattice leg diameter for a round leg or width for a square cross section leg.","examples":[50]},"lattice_leg_is_round_cross_section":{"type":["boolean","null"],"title":"Lattice Leg is Round Cross Section","description":"The lattice leg is a round or square cross section. True is for a round leg cross section and false is for a square leg cross section.","examples":["true (for a round leg cross section)","false (for a square leg cross section)"]},"lattice_bracing_member_diameter_mm":{"type":["number","null"],"title":"Lattice Bracing Member Diameter [mm]","description":"THIS FIELD WILL BE DEPRECIATED IN THE NEXT MAJOR RELEASE. The lattice diagonal bracing member diameter.","examples":[12]},"lattice_bracing_member_diameter_horizontal_mm":{"type":["number","null"],"title":"Lattice Bracing Member Diameter Horizontal [mm]","description":"The lattice horizontal bracing member diameter in mm.","examples":[12]},"lattice_bracing_member_diameter_diagonal_mm":{"type":["number","null"],"title":"Lattice Bracing Member Diameter Diagonal [mm]","description":"The lattice diagonal bracing member diameter in mm.","examples":[12]},"lattice_number_of_diagonal_bracing_members":{"type":["integer","null"],"title":"Lattice Number of Bracing Members","description":"The number of lattice diagonal bracing members that are contained in one of the repetitive patterns making up a mast section.","examples":[1,2]},"lattice_bracing_member_length_diagonal_mm":{"type":["number","null"],"title":"Lattice Bracing Member Length Diagonal [mm]","description":"The lattice diagonal bracing member length in mm.","examples":[512]},"number_of_repetitive_patterns_on_face":{"type":["integer","null"],"title":"Number of Repetitive Patterns on Face","description":"The number of repetitive patterns on tower face as in the image. Note that for this case the pattern in red repeats itself 6 times. https://github.com/IEA-Task-43/digital_wra_data_standard/blob/master/images/number_of_repetitive_patterns_on_face.png.","examples":[6]},"lattice_bracing_member_height_mm":{"type":["number","null"],"title":"Lattice Bracing Member Height [mm]","description":"The height of the lattice diagonal bracing members.","examples":[900]},"lattice_has_horizontal_member":{"type":["boolean","null"],"title":"Does the tower have horizontal braces?","description":"This represents masts that have horizontal braces. True is for towers with horizontal braces and false is for towers without horizontal braces.","examples":["true (for towers with horizontal braces)","false (for towers without horizontal braces)"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]}},"additionalProperties":true,"required":[]},"additionalItems":false,"uniqueItems":true}},"additionalProperties":true},"vertical_profiler_properties":{"type":["array","null"],"title":"Vertical Profiler Properties","description":"Vertical profiler remote sensing devices (e.g. lidar, sodar and floating lidar) installation specific properties.","items":{"type":"object","title":"Vertical Profiler Properties","properties":{"device_datum_plane_height_m":{"type":["number","null"],"title":"Device Datum Plane Height [m]","description":"The datum plane height of the remote sensing device where the datum feature is defined here: http://data.windenergy.dtu.dk/ontologies/view/ontolidar/en/page/DatumFeature . For lidars the datum feature is usually the window and for sodars it is usually the base of the device. These datum plane heights are also usually referred to as above ground level however it may be above sea level or above a platform level.","examples":[0.5,1]},"height_reference_id":{"type":["string","null"],"title":"Height Reference","description":"The height reference frame that is used to measure the item height. E.g. onshore this is 'ground level' i.e. the item is 0.5 m above ground level. Offshore is a bit different as it can be 20 m above 'mean sea level' or 20 m above 'lowest astronomical tide' for a fixed structure or 20 m above 'sea level' for a floating lidar.","enum":["ground_level","mean_sea_level","sea_level","lowest_astronomical_tide","sea_floor","other"],"default":"ground_level"},"device_orientation_deg":{"type":["number","null"],"title":"Device Orientation [deg]","description":"The orientation that the remote sensing device is installed relative to north.","minimum":0,"maximum":360},"orientation_reference_id":{"type":["string","null"],"title":"Orientation Reference","description":"The orientation reference the item is measured against. E.g. magnetic north.","enum":["magnetic_north","true_north","grid_north",null]},"device_vertical_orientation":{"type":["string","null"],"title":"Device Vertical Orientation","description":"The vertical orientation that the remote sensing device is installed. E.g. an ADCP mounted on the sea floor has an 'upwards' vertical orientation pointing towards the sea surface whereas an ADCP mounted underneath a buoy has a 'downward' vertical orientation pointing towards the sea floor.","enum":["upward","downward",null]},"date_from":{"type":["string","null"],"format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]}},"additionalProperties":false,"required":[]},"additionalItems":false,"uniqueItems":true},"logger_main_config":{"type":"array","title":"Logger Configuration","description":"This represents how the logger's main settings are configured. For example, it's sampling rate or averaging period. For remote sensing devices, such as lidar's, the device itself is considered as a logger and so these logger configuration attributes should be used to describe the lidar.","items":{"type":"object","title":"Logger Configuration","properties":{"logger_oem_id":{"type":"string","title":"Logger OEM","description":"This is the logger or remote sensing device manufacturer id as defined by the IEA Wind Resource Assessment Data Model Schema.","enum":["NRG Systems","Ammonit","Campbell Scientific","Vaisala","SecondWind","Kintech","Wilmers","Unidata","WindLogger","Leosphere","ZX Lidars","AXYS Technologies","AQSystem","Pentaluum","Nortek","Teledyne RDI","Aanderaa","Other"]},"logger_model_name":{"type":["string","null"],"title":"Logger Model Name","description":"This is the logger or remote sensing device model name. This is usually stated in the data files from the logger in either the header or footer.","examples":["Symphonie Plus3","CR1000","Meteo-40M","WindCube v2"]},"logger_serial_number":{"type":"string","title":"Logger Serial Number","description":"The logger or remote sensing device serial number. This is sometimes different from the logger id."},"logger_firmware_version":{"type":["string","null"],"title":"Logger Firmware Version","description":"The logger or remote sensing device's Firmware Version. This is the software version that is run on the logger at the time of data acquisition. This software can be updated and so can sometimes impact the results of the outputted data. E.g. NRG SymphoniePro, Firmware Version: 3.2.3. For loggers/devices that have multiple software programmes to process the outputted data the versions can be concatenated together."},"logger_id":{"type":["string","null"],"title":"Logger Id","description":"This is the logger or remote sensing device id. It may be set by the logger programmer and may be different from the logger serial number.","examples":["4321","D123456","WLS7-999"]},"logger_name":{"type":["string","null"],"title":"Logger Name","description":"The logger (or mast name) name assigned to the logger in the logger programme.","examples":["AName_MM1"]},"date_from":{"type":"string","format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"encryption_pin_or_key":{"type":["string","null"],"title":"Encryption PIN or Key","description":"The encryption PIN or key used to encrypt the data.","examples":["9876","KkocDuSCk3v5tw4kRveHGQvuD1kYVVbU"]},"enclosure_lock_details":{"type":["string","null"],"title":"Enclosure Lock Details","description":"Details about how to open the logger enclosure box when on site.","examples":["Combination lock PIN 54321.","Physical key has id 54321."]},"data_transfer_details":{"type":["string","null"],"title":"Data Transfer Details","description":"Details about how the data is transferred from the logger to the recipient.","examples":["Logger emails to data@developername.com","Retrieve data via LoggerNet."]},"offset_from_utc_hrs":{"type":["number","null"],"title":"Offset From UTC [hr]","description":"The number of hours that the logger clock is offset from UTC. E.g. -5 for Eastern Standard Time. This could also be used to capture an incorrect time programmed into the logger. E.g. a logger might be installed in upstate New York and have a UTC offset of -5. Unfortunately the mast installer programmed the incorrect time into the logger by +15 mins. Therefore the offset from UTC is -4.75.","examples":["-5 (for Eastern Standard Time)","1 (for Central European Time)","5.5 (for India Standard Time)"]},"sampling_rate_sec":{"type":["integer","null"],"title":"Sampling Rate [s]","description":"The number of seconds the logger samples data.","examples":["1","2"]},"averaging_period_minutes":{"type":["integer","null"],"title":"Averaging Period [min]","description":"The number of minutes the logger aggregates the data over.","examples":["10","60"]},"timestamp_is_end_of_period":{"type":["boolean","null"],"title":"Timestamp at End of Period","description":"Does the timestamp represent the end of the averaging period. True is for timestamp to represent the end of the averaging period and false is for timestamp to represent the start of the averaging period.","examples":["true (for timestamp to represent the end of the averaging period)","false (for timestamp to represent the start of the averaging period)"]},"clock_is_auto_synced":{"type":["boolean","null"],"title":"Clock is Auto-Synced","description":"Is the logger clock auto-synced with an internet time server to keep accurate time. True is for when the logger clock is auto-synced and false is for when the logger clock is not auto-synced.","examples":["true (for when the logger clock is auto-synced)","false (for when the logger clock is not auto-synced)"]},"logger_acquisition_uncertainty":{"type":["number","null"],"title":"Logger Acquisition Uncertainty [%]","description":"The uncertainty of the logger acquisition system as a percentage. This is also referred to as the uncertainty of the data acquisition system within IEC 61400-12-1. ","examples":["0.1"]},"uncertainty_k_factor":{"type":["number","null"],"title":"Uncertainty K Factor","description":"Uncertainty k factor for Logger Acquisition Uncertainty as provided in logger documentation specification.","examples":["2"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]},"lidar_config":{"type":["array","null"],"title":"Lidar Specific Configuration","description":"The lidar specific configuration represents how the lidar's specific settings are configured. For example, if FCR is turned on.","items":{"type":"object","title":"Lidar Specific Configuration","properties":{"flow_corrections_applied":{"type":["boolean","null"],"title":"Flow Corrections Applied","description":"Is there any flow corrections applied to the measured data by the lidar unit, e.g. Flow Complexity Recognition (FCR) for WindCubes?","examples":["true (for any flow corrections applied)","false (for no flow corrections applied)"]},"date_from":{"type":["string","null"],"format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]}},"additionalProperties":false,"required":[]},"additionalItems":false,"uniqueItems":true}},"additionalProperties":true,"required":["date_from","date_to","logger_oem_id","logger_serial_number"]},"additionalItems":false,"uniqueItems":true},"measurement_point":{"type":"array","title":"Measurement Point","description":"This represents a point in space where a measurement takes place.","items":{"type":"object","title":"Measurement Point","properties":{"name":{"type":"string","title":"Name","description":"The name the measurement point is commonly referred to. This is the name that is used to refer to the data in an analysis and reporting."},"measurement_type_id":{"type":"string","title":"Measurement Type","description":"The type of measurement been made. See more information in the examples.","enum":["wind_speed","wind_direction","air_temperature","water_temperature","temperature","air_pressure","air_density","relative_humidity","voltage","current","resistance","power","energy","vertical_wind_speed","wind_speed_turbulence","precipitation","ice_detection","global_horizontal_irradiance","direct_normal_irradiance","diffuse_horizontal_irradiance","global_tilted_irradiance","global_normal_irradiance","albedo","soiling_loss_index","illuminance","fog","salinity","conductivity","pressure","gps_coordinates","status","flag","counter","availability","quality","carrier_to_noise_ratio","doppler_spectral_broadening","echo_intensity","signal_to_noise_ratio","motion_corrected_wind_speed","motion_corrected_wind_direction","motion_corrected_vertical_wind_speed","wave_height","wave_significant_height","wave_maximum_height","wave_direction","wave_directional_spread","wave_period","wave_peak_period","water_speed","vertical_water_speed","water_direction","orientation","compass_direction","true_north_offset","tilt","tilt_x","tilt_y","tilt_z","u","v","w","elevation","altitude","height","azimuth","water_level","depth","timestamp","other"],"examples":["wind_speed  (the horizontal component of wind speed)","wind_direction  (the direction from which the wind is coming from)","air_temperature  (outdoor ambient temperature of the air)","water_temperature  (is the in situ temperature of the water. In CF Conventions this is equivalent to 'sea_water_temperature'.)","temperature  (the temperature of a body or indoor ambient air temperature)","air_pressure (outdoor pressure of the air)","air_density (the density of air)","relative_humidity (outdoor relative humidity of the air","voltage (electrical voltage, typically the logger battery voltage)","current (electrical current, typically the logger battery current)","resistance (electrical resistance, the raw or basic measurement from many different sensors)","power (the amount of energy transferred or converted per unit of time)","energy (in physics, is the capacity for doing work. It may exist in potential, kinetic, thermal, electrical, chemical, nuclear, or other various forms.)","vertical_wind_speed (the vertical component of wind speed)","wind_speed_turbulence (the turbulence of the wind speed)","precipitation (water which falls to the ground from the atmosphere in forms of rain, snow, sleet, ice pellets, dew, frost, and hail)","ice_detection (detection of ice build up on surfaces)","global_horizontal_irradiance (the total power or instantaneous rate of energy from the sun received by a horizontal surface on Earth)","direct_normal_irradiance (the direct line of sight power or instantaneous rate of energy from the sun, excluding diffuse irradiance, received by a surface on Earth perpendicular to the sun)","diffuse_horizontal_irradiance (the power or instantaneous rate of energy from light scattered by the atmosphere, excluding direct irradiance, received by a horizontal surface on Earth)","global_tilted_irradiance (the total power or instantaneous rate of energy from the sun received by a surface on Earth with defined tilt and azimuth, fixed or sun-tracking)","global_normal_irradiance (the total power or instantaneous rate of energy from the sun received by a surface on Earth perpendicular to the sun)","albedo (or reflected solar radiation from the earth's surface, is defined as the ratio between the reflected energy and the incident energy over a unit area)","soiling_loss_index (an index of lost energy between clean and dirty PV modules, https://www.campbellsci.com/cr-pvs1 )","illuminance (measure of visible light falling onto a per unit area, typically measured in lux)","fog (is a visible aerosol consisting of tiny water droplets or ice crystals suspended in the air at or near the Earth's surface)","salinity (is the salt content of water. In CF Conventions this is equivalent to 'sea_water_salinity', 'sea_water_practical_salinity' or 'sea_water_absolute_salinity' depending on the scale been used.)","conductivity (of an electrolyte solution, e.g. sea water, is a measure of its ability to conduct electricity. In CF Conventions this is equivalent to 'sea_water_electrical_conductivity' for offshore use cases.)","pressure (the pressure of a medium e.g. water. In CF Conventions this is equivalent to 'sea_water_pressure' for offshore use cases.)","gps_coordinates (latitude and/or longitude as measured by a gps)","status (a status flag or other to describe the status of a sensor or object)","counter (a simple counter)","availability (the availability of a sensor or the presence of something in a measurement typically measured as %, e.g. '40m Data Availability (%)' or 'Proportion Of Packets with Fog (%)'. This is currently a generic catch-all for all 'availability' like metrics and may be resolved into more specific definitions in future revisions.)","quality (a measure of the quality of a measurement)","carrier_to_noise_ratio (a measure of signal strength as measured by lidar devices, http://data.windenergy.dtu.dk/ontologies/view/IEATask32Glossary/en/page/parameters.carrier_to_noise_ratio )","doppler_spectral_broadening (as measured by lidar devices)","echo_intensity (is the brightness or brilliance of the acoustic echo usually measured by an ADCP. If from an ADCP, it can be used to judge the quality of measurement or estimate the amount of suspended sediment in the water column.)","signal_to_noise_ratio (a measure of signal strength as measured by ADCPs.)","motion_corrected_wind_speed (the horizontal component of wind speed which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","motion_corrected_wind_direction (the direction form which the wind is coming from which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","motion_corrected_vertical_wind_speed (the vertical component of wind speed which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","wave_height (is the mean wave height measured during the observation period, where the height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_mean_height'.)","wave_significant_height (is a statistic computed from wave measurements and corresponds to the average height of the highest one third of the waves, where the height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_significant_height'.)","wave_maximum_height (is the greatest trough to crest distance measured during the observation period. Wave height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_maximum_height'.)","wave_direction (the direction from which the wave is coming from. The direction is a bearing in the usual geographical sense, measured positive clockwise from due north. In CF Conventions this is equivalent to 'sea_surface_wave_from_direction'.)","wave_directional_spread (is the standard deviation of all the wave directions measured. It signifies how spread out,or how wide an area, all the waves are coming from. In CF Conventions this is equivalent to 'sea_surface_wave_directional_spread'.)","wave_period (is the mean wave period measured during the observation period at a specific location. In CF Conventions this is equivalent to 'sea_surface_wave_mean_period'.)","wave_peak_period (is the wave period of the most energetic waves in the total wave spectrum at a specific location. In CF Conventions this is equivalent to 'sea_surface_wave_period_at_variance_spectral_density_maximum'.)","water_speed (the horizontal magnitude of the water's velocity. This is sometimes also known as 'current speed' and in CF Conventions this is equivalent to 'sea_water_speed'.)","vertical_water_speed (the vertical magnitude of the water's velocity. In CF Conventions this is equivalent to 'upward_sea_water_velocity'.)","water_direction (the direction from which the water flow is coming from. The direction is a bearing in the usual geographical sense, measured positive clockwise from due north. This is sometimes also known as 'current direction' and in CF Conventions this is equivalent to 'sea_water_velocity_from_direction' or 'sea_water_from_direction'.)","orientation (the direction something points or faces relative to north or other specified positions)","compass_direction (the direction as measured by a compass, therefore referenced to magnetic north)","true_north_offset (the offset something points or faces relative to true north, e.g. from a solar compass such as a Geovane)","tilt_x (the tilt of an object relative to the x-axis)","tilt_y (the tilt of an object relative to the y-axis)","tilt_z (the tilt of an object relative to the z-axis)","u (the U component vector, relating to wind it is positive for a west to east flow (eastward wind), however, it can be used for other vectors. If so, please use the notes property to define it.)","v (the V component vector, relating to wind it is positive for a south to north flow (northward wind), however, it can be used for other vectors. If so, please use the notes property to define it.)","w (the W component vector, if using this for wind please use the 'vertical_wind_speed' measurement type. Please use the notes property to define how this component is utilised.","elevation (the height the surface of the earth is above mean sea level)","altitude (the height above mean sea level or is the angle between the sun and the observer's local horizon, also sometimes referred to as elevation)","height (the vertical distance above a particular reference e.g. ground level.)","azimuth (is the angle of the sun around the horizon, in the northern hemisphere this is usually measured from north and increasing eastward whereas in the southern hemisphere it can be measured from the south and increasing westward)","water_level (is the height of the sea surface above the sea floor. In CF Conventions this is equivalent, but opposite in respect of their point of reference, to 'sea_floor_depth_below_sea_surface'.)","depth (the vertical distance below a particular reference e.g. sea level.)","timestamp (the timestamp of when a measurement value was recorded)","other"]},"height_m":{"type":["number","null"],"title":"Height [m]","description":"The height (in meters) typically above ground level that the measurement is taking place. If you do not yet know the height please use null."},"height_reference_id":{"type":["string","null"],"title":"Height Reference","description":"The height reference frame that is used to measure the item height. E.g. onshore this is 'ground level' i.e. the item is 0.5 m above ground level. Offshore is a bit different as it can be 20 m above 'mean sea level' or 20 m above 'lowest astronomical tide' for a fixed structure or 20 m above 'sea level' for a floating lidar.","enum":["ground_level","mean_sea_level","sea_level","lowest_astronomical_tide","sea_floor","other"],"default":"ground_level"},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]},"logger_measurement_config":{"type":"array","title":"Logger Measurement Configuration","description":"The measurement configuration that is programmed into the logging device.","items":{"type":"object","title":"Logger Measurement Configuration","properties":{"slope":{"type":["number","null"],"title":"Logger Slope","description":"The slope programmed into the logger for this measurement. This is typically expected for anemometers and wind vanes, but not necessarily required for other sensor types."},"offset":{"type":["number","null"],"title":"Logger Offset","description":"The offset programmed into the logger. This is typically expected for anemometers and wind vanes, but not necessarily required for other sensor types."},"sensitivity":{"type":["number","null"],"title":"Logger Sensitivity","description":"The sensitivity programmed into the logger. Usually used for pyranometers. It is the same as 1/slope with zero for offset."},"measurement_units_id":{"type":["string","null"],"title":"Measurement Units","description":"The measurement units of the values the sensor records.","enum":["m/s","mph","knots","deg","deg_C","deg_F","K","%","mbar","dbar","hPa","atm","mmHg","inHg","kg/m^2","kg/m^3","V","mA","A","ohm","Hz","mm","m","s","W/m^2","W","kW","MW","kWh","MWh","m/s^2","lux","dB","L","g/L","g/kg","ppt","psu","S/m","-",null]},"height_m":{"type":["number","null"],"title":"Logger Height [m]","description":"The height in meters at which the sensor is deployed, as programmed into the logger. For remote sensing devices such as lidars and sodars this is the measurement height programmed into the device where the measurement height is defined here: http://data.windenergy.dtu.dk/controlled-terminology/IEAWindTask32/parameters.measurement_height"},"serial_number":{"type":["string","null"],"title":"Serial Number","description":"The serial number of the sensor programmed into the logger."},"connection_channel":{"type":["string","null"],"title":"Connection Channel","description":"The connection channel the sensor is wired into on the logger."},"logger_stated_boom_orientation_deg":{"type":["number","null"],"title":"Logger Stated Boom Orientation [deg]","description":"The boom orientation of the horizontal boom the sensor is mounted on as programmed into the logger.","minimum":0,"maximum":360},"date_from":{"type":"string","format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]},"column_name":{"type":"array","title":"Column Names","description":"The group of column names in the data file which relates to this sensor configuration.","items":{"type":"object","title":"Column Names","properties":{"column_name":{"type":"string","title":"Column Name","description":"The column name in the data file which relates to this sensor configuration."},"statistic_type_id":{"type":"string","title":"Statistic Type","description":"The statistic, aggregation function or signal e.g. 'average' or 'maximum' that this column records.","enum":["avg","sd","max","min","count","availability","quality","sum","median","mode","range","gust","ti","text"]},"is_ignored":{"type":"boolean","title":"Is Ignored","description":"If you want to ignore this column name, set to True.","default":false},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]}},"additionalProperties":false,"required":["column_name","statistic_type_id"]},"additionalItems":false,"uniqueItems":true}},"additionalProperties":false,"required":["column_name","date_from","date_to"]},"additionalItems":false,"uniqueItems":true},"sensor":{"type":"array","title":"Sensor","description":"This represents information about the sensor taking the measurements.","items":{"type":"object","title":"Sensor","properties":{"oem":{"type":["string","null"],"title":"Sensor OEM","description":"The measurement sensor manufacturer.","examples":["Vector","NRG Systems","Thies"]},"model":{"type":["string","null"],"title":"Sensor Model","description":"The measurement sensor model.","examples":["#200P","First Class Advanced","A100L2"]},"serial_number":{"type":["string","null"],"title":"Serial Number","description":"The serial number of the sensor installed."},"sensor_type_id":{"type":["string","null"],"title":"Sensor Type","description":"The measurement sensor type e.g. anemometer.","enum":["anemometer","wind_vane","thermometer","barometer","hygrometer","thermohygrometer","voltmeter","ammeter","pyranometer","pyrheliometer","albedometer","2d_ultrasonic","3d_ultrasonic","vertical_anemometer","propeller_anemometer","gill_propeller","rain_gauge","ice_detection_sensor","fog_sensor","gps","illuminance_sensor","compass","solar_compass","inertial_measurement_unit","adcp","ctd","lidar","sodar","other",null]},"classification":{"type":["string","null"],"title":"Classification","description":"The classification of a particular anemometer for this location. This combines the class index (number) with the terrain class (A, B, C, D or S) e.g. 1.2A. The format of this is validated by a regex which has the form of ^[0-9][.][0-9][ABCDS]$ i.e. digit.digit followed by a character.","examples":["1.0A","3.2B","2.7S","10.32S"],"pattern":"^([0-9]{1,2})[.]([0-9]{1,2})[ABCDS]$"},"instrument_poi_height_mm":{"type":["number","null"],"title":"Instrument Point of Interest Height [mm]","description":"This is the physical height dimension, in mm, of the sensor's point of interest, i.e. point of measurement. This is to aid IEC mounting calculations. It is not the height above ground level at which it is deployed. For example, if the sensor is an anemometer it is the height from the bottom of the instrument to the centre of the cups. For a sonic anemometer it is the centre of the sampling volume. For a horizontal propeller anemometer it is the axis of rotation of the propellers. For a wind vane it is the top of the vane.","examples":["169 mm for a Vector A100 anemometer (https://www.windspeed.co.uk/ws/index.php?option=displaypage&op=page&Itemid=48#dimensions)."]},"is_heated":{"type":["boolean","null"],"title":"Is Heated","description":"Is the sensor heated to reduce the effect of icing. This is usually relevant for wind speed and wind vane sensors. True is for when the sensor is heated and false is for when the sensor is not heated.","examples":["true (if the sensor is heated)","false (if the sensor is not heated)"]},"sensor_body_size_mm":{"type":["number","null"],"title":"Sensor Body Size [mm]","description":"This is the instrument body size in mm. This parameter is used in IEC 61400-12-2 to ensure that the size of the anemometer body is smaller than the diameter of the tube used to mount the anemometer.","examples":["50"]},"date_from":{"type":"string","format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]},"calibration":{"type":["array","null"],"title":"Calibration","description":"The sensor calibration details. This is typically expected for anemometers, but not necessarily required for other sensor types.","items":{"type":"object","title":"Calibration","properties":{"measurement_type_id":{"type":"string","title":"Measurement Type","description":"The type of measurement been made. See more information in the examples.","enum":["wind_speed","wind_direction","air_temperature","water_temperature","temperature","air_pressure","air_density","relative_humidity","voltage","current","resistance","power","energy","vertical_wind_speed","wind_speed_turbulence","precipitation","ice_detection","global_horizontal_irradiance","direct_normal_irradiance","diffuse_horizontal_irradiance","global_tilted_irradiance","global_normal_irradiance","albedo","soiling_loss_index","illuminance","fog","salinity","conductivity","pressure","gps_coordinates","status","flag","counter","availability","quality","carrier_to_noise_ratio","doppler_spectral_broadening","echo_intensity","signal_to_noise_ratio","motion_corrected_wind_speed","motion_corrected_wind_direction","motion_corrected_vertical_wind_speed","wave_height","wave_significant_height","wave_maximum_height","wave_direction","wave_directional_spread","wave_period","wave_peak_period","water_speed","vertical_water_speed","water_direction","orientation","compass_direction","true_north_offset","tilt","tilt_x","tilt_y","tilt_z","u","v","w","elevation","altitude","height","azimuth","water_level","depth","timestamp","other"],"examples":["wind_speed  (the horizontal component of wind speed)","wind_direction  (the direction from which the wind is coming from)","air_temperature  (outdoor ambient temperature of the air)","water_temperature  (is the in situ temperature of the water. In CF Conventions this is equivalent to 'sea_water_temperature'.)","temperature  (the temperature of a body or indoor ambient air temperature)","air_pressure (outdoor pressure of the air)","air_density (the density of air)","relative_humidity (outdoor relative humidity of the air","voltage (electrical voltage, typically the logger battery voltage)","current (electrical current, typically the logger battery current)","resistance (electrical resistance, the raw or basic measurement from many different sensors)","power (the amount of energy transferred or converted per unit of time)","energy (in physics, is the capacity for doing work. It may exist in potential, kinetic, thermal, electrical, chemical, nuclear, or other various forms.)","vertical_wind_speed (the vertical component of wind speed)","wind_speed_turbulence (the turbulence of the wind speed)","precipitation (water which falls to the ground from the atmosphere in forms of rain, snow, sleet, ice pellets, dew, frost, and hail)","ice_detection (detection of ice build up on surfaces)","global_horizontal_irradiance (the total power or instantaneous rate of energy from the sun received by a horizontal surface on Earth)","direct_normal_irradiance (the direct line of sight power or instantaneous rate of energy from the sun, excluding diffuse irradiance, received by a surface on Earth perpendicular to the sun)","diffuse_horizontal_irradiance (the power or instantaneous rate of energy from light scattered by the atmosphere, excluding direct irradiance, received by a horizontal surface on Earth)","global_tilted_irradiance (the total power or instantaneous rate of energy from the sun received by a surface on Earth with defined tilt and azimuth, fixed or sun-tracking)","global_normal_irradiance (the total power or instantaneous rate of energy from the sun received by a surface on Earth perpendicular to the sun)","albedo (or reflected solar radiation from the earth's surface, is defined as the ratio between the reflected energy and the incident energy over a unit area)","soiling_loss_index (an index of lost energy between clean and dirty PV modules, https://www.campbellsci.com/cr-pvs1 )","illuminance (measure of visible light falling onto a per unit area, typically measured in lux)","fog (is a visible aerosol consisting of tiny water droplets or ice crystals suspended in the air at or near the Earth's surface)","salinity (is the salt content of water. In CF Conventions this is equivalent to 'sea_water_salinity', 'sea_water_practical_salinity' or 'sea_water_absolute_salinity' depending on the scale been used.)","conductivity (of an electrolyte solution, e.g. sea water, is a measure of its ability to conduct electricity. In CF Conventions this is equivalent to 'sea_water_electrical_conductivity' for offshore use cases.)","pressure (the pressure of a medium e.g. water. In CF Conventions this is equivalent to 'sea_water_pressure' for offshore use cases.)","gps_coordinates (latitude and/or longitude as measured by a gps)","status (a status flag or other to describe the status of a sensor or object)","counter (a simple counter)","availability (the availability of a sensor or the presence of something in a measurement typically measured as %, e.g. '40m Data Availability (%)' or 'Proportion Of Packets with Fog (%)'. This is currently a generic catch-all for all 'availability' like metrics and may be resolved into more specific definitions in future revisions.)","quality (a measure of the quality of a measurement)","carrier_to_noise_ratio (a measure of signal strength as measured by lidar devices, http://data.windenergy.dtu.dk/ontologies/view/IEATask32Glossary/en/page/parameters.carrier_to_noise_ratio )","doppler_spectral_broadening (as measured by lidar devices)","echo_intensity (is the brightness or brilliance of the acoustic echo usually measured by an ADCP. If from an ADCP, it can be used to judge the quality of measurement or estimate the amount of suspended sediment in the water column.)","signal_to_noise_ratio (a measure of signal strength as measured by ADCPs.)","motion_corrected_wind_speed (the horizontal component of wind speed which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","motion_corrected_wind_direction (the direction form which the wind is coming from which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","motion_corrected_vertical_wind_speed (the vertical component of wind speed which has been corrected due to the motion of the measuring sensor/device, typically from floating lidar systems)","wave_height (is the mean wave height measured during the observation period, where the height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_mean_height'.)","wave_significant_height (is a statistic computed from wave measurements and corresponds to the average height of the highest one third of the waves, where the height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_significant_height'.)","wave_maximum_height (is the greatest trough to crest distance measured during the observation period. Wave height is defined as the vertical distance from a wave trough to the following wave crest. In CF Conventions this is equivalent to 'sea_surface_wave_maximum_height'.)","wave_direction (the direction from which the wave is coming from. The direction is a bearing in the usual geographical sense, measured positive clockwise from due north. In CF Conventions this is equivalent to 'sea_surface_wave_from_direction'.)","wave_directional_spread (is the standard deviation of all the wave directions measured. It signifies how spread out,or how wide an area, all the waves are coming from. In CF Conventions this is equivalent to 'sea_surface_wave_directional_spread'.)","wave_period (is the mean wave period measured during the observation period at a specific location. In CF Conventions this is equivalent to 'sea_surface_wave_mean_period'.)","wave_peak_period (is the wave period of the most energetic waves in the total wave spectrum at a specific location. In CF Conventions this is equivalent to 'sea_surface_wave_period_at_variance_spectral_density_maximum'.)","water_speed (the horizontal magnitude of the water's velocity. This is sometimes also known as 'current speed' and in CF Conventions this is equivalent to 'sea_water_speed'.)","vertical_water_speed (the vertical magnitude of the water's velocity. In CF Conventions this is equivalent to 'upward_sea_water_velocity'.)","water_direction (the direction from which the water flow is coming from. The direction is a bearing in the usual geographical sense, measured positive clockwise from due north. This is sometimes also known as 'current direction' and in CF Conventions this is equivalent to 'sea_water_velocity_from_direction' or 'sea_water_from_direction'.)","orientation (the direction something points or faces relative to north or other specified positions)","compass_direction (the direction as measured by a compass, therefore referenced to magnetic north)","true_north_offset (the offset something points or faces relative to true north, e.g. from a solar compass such as a Geovane)","tilt_x (the tilt of an object relative to the x-axis)","tilt_y (the tilt of an object relative to the y-axis)","tilt_z (the tilt of an object relative to the z-axis)","u (the U component vector, relating to wind it is positive for a west to east flow (eastward wind), however, it can be used for other vectors. If so, please use the notes property to define it.)","v (the V component vector, relating to wind it is positive for a south to north flow (northward wind), however, it can be used for other vectors. If so, please use the notes property to define it.)","w (the W component vector, if using this for wind please use the 'vertical_wind_speed' measurement type. Please use the notes property to define how this component is utilised.","elevation (the height the surface of the earth is above mean sea level)","altitude (the height above mean sea level or is the angle between the sun and the observer's local horizon, also sometimes referred to as elevation)","height (the vertical distance above a particular reference e.g. ground level.)","azimuth (is the angle of the sun around the horizon, in the northern hemisphere this is usually measured from north and increasing eastward whereas in the southern hemisphere it can be measured from the south and increasing westward)","water_level (is the height of the sea surface above the sea floor. In CF Conventions this is equivalent, but opposite in respect of their point of reference, to 'sea_floor_depth_below_sea_surface'.)","depth (the vertical distance below a particular reference e.g. sea level.)","timestamp (the timestamp of when a measurement value was recorded)","other"]},"slope":{"type":["number","null"],"title":"Calibration Slope","description":"The slope programmed into the logger."},"offset":{"type":["number","null"],"title":"Calibration Offset","description":"The offset programmed into the logger."},"sensitivity":{"type":["number","null"],"title":"Calibration Sensitivity","description":"The sensitivity programmed into the logger."},"report_file_name":{"type":["string","null"],"title":"Report File Name","description":"The file name of the calibration report.","examples":["A12345_calibration.pdf"]},"report_link":{"type":["string","null"],"title":"Report Link","description":"A link to the calibration report.","examples":["https://www.dropbox.com/bw/7dzu7xzb/AAN-BNsa?dl=0"]},"calibration_id":{"type":["string","null"],"title":"Calibration ID","description":"The calibration ID is the unique number that the calibration organisation uses to identify a particular calibration. It may be referred to as Certificate number or Calibration Mark by some organisations.","examples":["1234567","CERT1234"]},"date_of_calibration":{"type":["string","null"],"format":"date","title":"Date of Calibration","description":"The date the sensor calibration took place.","examples":["2019-12-06"]},"revision":{"type":["string","null"],"title":"Calibration Revision","description":"This is the revision number or other identifier if the calibration report was revised. The 'date of calibration' and 'calibration id' may stay the same for an update to the report and so this revision field allows this report to be uniquely identified.","examples":["2.0","B"]},"calibration_organisation":{"type":["string","null"],"title":"Calibration Organisation","description":"The organisation who performed the calibration.","examples":["Deutsche WindGuard","Ammonit Wind Tunnel GmbH"]},"place_of_calibration":{"type":["string","null"],"title":"Place of Calibration","description":"The unique place or wind tunnel where the calibration took place. E.g. 'place of calibration' is usually a field on a calibration certificate. If not, a combination of a unique tunnel id or serial number and the address would suffice. In the Digital Calibration Certificate project this field maps to 'wind_tunnel_id'.","examples":["Windtunnel 2 of Deutsche WindGuard WindTunnel Services GmbH, Varel","AWT Bargeshagen"]},"uncertainty_k_factor":{"type":["number","null"],"title":"Uncertainty K Factor","description":"The uncertainty k factor stated in the calibration report.","examples":[2]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]},"calibration_uncertainty":{"type":["array","null"],"title":"Calibration Uncertainty","description":"The sensor calibration details.","items":{"type":"object","title":"Calibration Uncertainty","properties":{"reference_bin":{"type":["number","null"],"title":"Reference Bin","description":"The reference bin for the calibration.","examples":[5.93]},"reference_unit":{"type":["string","null"],"title":"Reference Unit","description":"The reference bin and uncertainty units.","examples":["m/s"]},"combined_uncertainty":{"type":["number","null"],"title":"Combined Uncertainty","description":"The combined uncertainty associated with the deviation between the reference and the test item at this reference bin.","examples":[0.1]}},"additionalProperties":false},"additionalItems":false,"uniqueItems":true}},"additionalProperties":false},"additionalItems":false,"uniqueItems":true}},"additionalProperties":false,"required":["date_from","date_to"]},"additionalItems":false,"uniqueItems":true},"mounting_arrangement":{"type":["array","null"],"title":"Mounting Arrangement","description":"This describes how the sensor is mounted onto the met mast.","items":{"type":"object","title":"Mounting Arrangement","additionalProperties":false,"properties":{"mast_section_geometry_uuid":{"type":["null","string"],"format":"uuid","title":"Mast Section Geometry UUID","description":"The uuid to link this Measurement Point's mounting arrangement to the Mast Section Geometry. A UUID can be generated here https://www.uuidgenerator.net/"},"mounting_type_id":{"type":["string","null"],"title":"Mounting Type","description":"The mounting type the sensor is mounted onto the mast e.g. an anemometer top mounted above the mast or a pair of anemometers mounted in the goal post configuration.","enum":["side","goal_post","top",null]},"boom_orientation_deg":{"type":["number","null"],"title":"Boom Orientation [deg]","description":"The boom orientation of the horizontal boom the sensor is mounted on.","minimum":0,"maximum":360},"vane_dead_band_orientation_deg":{"type":["number","null"],"title":"Vane Dead Band Orientation [deg]","description":"The wind vane dead band orientation.","minimum":0,"maximum":360},"orientation_reference_id":{"type":["string","null"],"title":"Orientation Reference","description":"The orientation reference the item is measured against. E.g. magnetic north.","enum":["magnetic_north","true_north","grid_north",null]},"tilt_angle_deg":{"type":["number","null"],"title":"Tilt Angle [deg]","description":"The tilt angle of either the vertical upstand the sensor is mounted on.","minimum":-90,"maximum":90},"boom_oem":{"type":["string","null"],"title":"Boom OEM","description":"The boom OEM."},"boom_model":{"type":["string","null"],"title":"Boom Model","description":"The boom model."},"upstand_height_mm":{"type":["number","null"],"title":"Upstand Height [mm]","description":"The height, measured in millimeters, of the upstand.","minimum":0},"upstand_diameter_mm":{"type":["number","null"],"title":"Upstand Diameter [mm]","description":"The diameter, measured in millimeters, of the upstand.","minimum":0},"boom_diameter_mm":{"type":["number","null"],"title":"Boom Diameter [mm]","description":"The diameter, measured in millimeters, of the boom.","minimum":0},"boom_length_mm":{"type":["number","null"],"title":"Boom Length [mm]","description":"The length, measured in millimeters, of the boom.","minimum":0},"distance_from_mast_to_sensor_mm":{"type":["number","null"],"title":"Distance Mast to Sensor [mm]","description":"The distance, measured in millimeters, of edge of the mast to the centre of the sensor.","minimum":0},"date_from":{"type":"string","format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]}},"required":["date_from","date_to"]},"additionalItems":false,"uniqueItems":true},"interference_structures":{"type":["array","null"],"title":"Interference Structures","description":"","items":{"type":"object","title":"Interference Structures","properties":{"structure_type_id":{"type":"string","title":"Structure Type","description":"The type of structure that is causing an interference in the sensor's measurements.","enum":["lightning_finial","aviation_light","guy_wires","other"]},"orientation_from_mast_centre_deg":{"type":["number","null"],"title":"Orientation from Mast Centre [deg]","description":"The orientation of the interference structure, relative to the centre of the mast, causing an impact on the sensor's measurements.","minimum":0,"maximum":360},"orientation_reference_id":{"type":["string","null"],"title":"Orientation Reference","description":"The orientation reference the item is measured against. E.g. magnetic north.","enum":["magnetic_north","true_north","grid_north",null]},"distance_from_mast_centre_mm":{"type":["number","null"],"title":"Distance from Mast Centre [mm]","description":"The distance from the mast centre to the interference structure causing an impact on the sensor's measurements.","examples":[900]},"diameter_of_interference_structure_mm":{"type":["number","null"],"title":"Diameter of Interference Structure [mm]","description":"The diameter of the Interference Structure. If lightning finial, then it can be used for IEC validation. For irregularly shaped structures, a representative diameter would be sufficient for an analyst to understand it's size.","examples":[30]},"date_from":{"type":"string","format":"date-time","title":"Date From","description":"The date from when these properties are active. If these properties follow a change, then this Date From should equal the previous Date To. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00"]},"date_to":{"type":["string","null"],"format":"date-time","title":"Date To","description":"The final end date for when these properties are active. If these properties are currently active please use null. If null is not allowed please use 2100-01-01T00:00:00. The format of this date should follow ISO 8601 with the 'T' required. If a timezone is used, it is essential that this timezone is the same as the logger timezone.","examples":["2020-07-28T20:00:00","2100-01-01T00:00:00"]},"notes":{"type":["string","null"],"title":"Notes","description":"Notes relating to these properties.","examples":["I can write anything I want here."]},"update_at":{"type":["string","null"],"format":"date-time","title":"Date of Update","description":"The date these properties were last updated.","examples":["2020-07-28T20:49:13"]}},"additionalProperties":false,"required":["structure_type_id","date_from"]},"additionalItems":false,"uniqueItems":true}},"additionalProperties":false,"required":["name","measurement_type_id","height_m","logger_measurement_config"]},"additionalItems":false,"uniqueItems":true}},"additionalProperties":false,"required":["name","latitude_ddeg","longitude_ddeg","measurement_station_type_id","measurement_point"]},"additionalItems":false,"uniqueItems":true}},"additionalProperties":true,"required":["author","organisation","date","version","measurement_location"]};const formats0 = require("ajv-formats/dist/formats").fullFormats.date;const formats2 = require("ajv-formats/dist/formats").fullFormats["date-time"];const formats10 = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;const pattern0 = new RegExp("^([0-9]{1,2})[.]([0-9]{1,2})[.]([0-9]{1,2})-([0-9]{4})[.]([0-9]{2})$", "u");const pattern1 = new RegExp("^([0-9]{1,2})[.]([0-9]{1,2})[ABCDS]$", "u");const func2 = Object.prototype.hasOwnProperty;const func0 = require("ajv/dist/runtime/equal").default;function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://raw.githubusercontent.com/IEA-Task-43/digital_wra_data_standard/master/schema/iea43_wra_data_model.schema.json" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((((data.author === undefined) && (missing0 = "author")) || ((data.organisation === undefined) && (missing0 = "organisation"))) || ((data.date === undefined) && (missing0 = "date"))) || ((data.version === undefined) && (missing0 = "version"))) || ((data.measurement_location === undefined) && (missing0 = "measurement_location"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.author !== undefined){const _errs2 = errors;if(typeof data.author !== "string"){validate10.errors = [{instancePath:instancePath+"/author",schemaPath:"#/properties/author/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.organisation !== undefined){const _errs4 = errors;if(typeof data.organisation !== "string"){validate10.errors = [{instancePath:instancePath+"/organisation",schemaPath:"#/properties/organisation/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.date !== undefined){let data2 = data.date;const _errs6 = errors;if(errors === _errs6){if(errors === _errs6){if(typeof data2 === "string"){if(!(formats0.validate(data2))){validate10.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.version !== undefined){let data3 = data.version;const _errs8 = errors;if(errors === _errs8){if(typeof data3 === "string"){if(!pattern0.test(data3)){validate10.errors = [{instancePath:instancePath+"/version",schemaPath:"#/properties/version/pattern",keyword:"pattern",params:{pattern: "^([0-9]{1,2})[.]([0-9]{1,2})[.]([0-9]{1,2})-([0-9]{4})[.]([0-9]{2})$"},message:"must match pattern \""+"^([0-9]{1,2})[.]([0-9]{1,2})[.]([0-9]{1,2})-([0-9]{4})[.]([0-9]{2})$"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/version",schemaPath:"#/properties/version/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.plant_name !== undefined){let data4 = data.plant_name;const _errs10 = errors;if((typeof data4 !== "string") && (data4 !== null)){validate10.errors = [{instancePath:instancePath+"/plant_name",schemaPath:"#/properties/plant_name/type",keyword:"type",params:{type: schema11.properties.plant_name.type},message:"must be string,null"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.plant_type !== undefined){let data5 = data.plant_type;const _errs12 = errors;if((typeof data5 !== "string") && (data5 !== null)){validate10.errors = [{instancePath:instancePath+"/plant_type",schemaPath:"#/properties/plant_type/type",keyword:"type",params:{type: schema11.properties.plant_type.type},message:"must be string,null"}];return false;}if(!((((data5 === "null") || (data5 === "onshore_wind")) || (data5 === "offshore_wind")) || (data5 === "solar"))){validate10.errors = [{instancePath:instancePath+"/plant_type",schemaPath:"#/properties/plant_type/enum",keyword:"enum",params:{allowedValues: schema11.properties.plant_type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.measurement_location !== undefined){let data6 = data.measurement_location;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data6)){var valid1 = true;const len0 = data6.length;for(let i0=0; i0<len0; i0++){let data7 = data6[i0];const _errs16 = errors;if(errors === _errs16){if(data7 && typeof data7 == "object" && !Array.isArray(data7)){let missing1;if((((((data7.name === undefined) && (missing1 = "name")) || ((data7.latitude_ddeg === undefined) && (missing1 = "latitude_ddeg"))) || ((data7.longitude_ddeg === undefined) && (missing1 = "longitude_ddeg"))) || ((data7.measurement_station_type_id === undefined) && (missing1 = "measurement_station_type_id"))) || ((data7.measurement_point === undefined) && (missing1 = "measurement_point"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0,schemaPath:"#/properties/measurement_location/items/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs18 = errors;for(const key0 in data7){if(!(func2.call(schema11.properties.measurement_location.items.properties, key0))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0,schemaPath:"#/properties/measurement_location/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs18 === errors){if(data7.name !== undefined){const _errs19 = errors;if(typeof data7.name !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/name",schemaPath:"#/properties/measurement_location/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs19 === errors;}else {var valid2 = true;}if(valid2){if(data7.latitude_ddeg !== undefined){let data9 = data7.latitude_ddeg;const _errs21 = errors;if(errors === _errs21){if((typeof data9 == "number") && (isFinite(data9))){if(data9 > 90 || isNaN(data9)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/latitude_ddeg",schemaPath:"#/properties/measurement_location/items/properties/latitude_ddeg/maximum",keyword:"maximum",params:{comparison: "<=", limit: 90},message:"must be <= 90"}];return false;}else {if(data9 < -90 || isNaN(data9)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/latitude_ddeg",schemaPath:"#/properties/measurement_location/items/properties/latitude_ddeg/minimum",keyword:"minimum",params:{comparison: ">=", limit: -90},message:"must be >= -90"}];return false;}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/latitude_ddeg",schemaPath:"#/properties/measurement_location/items/properties/latitude_ddeg/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}}var valid2 = _errs21 === errors;}else {var valid2 = true;}if(valid2){if(data7.longitude_ddeg !== undefined){let data10 = data7.longitude_ddeg;const _errs23 = errors;if(errors === _errs23){if((typeof data10 == "number") && (isFinite(data10))){if(data10 > 180 || isNaN(data10)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/longitude_ddeg",schemaPath:"#/properties/measurement_location/items/properties/longitude_ddeg/maximum",keyword:"maximum",params:{comparison: "<=", limit: 180},message:"must be <= 180"}];return false;}else {if(data10 < -180 || isNaN(data10)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/longitude_ddeg",schemaPath:"#/properties/measurement_location/items/properties/longitude_ddeg/minimum",keyword:"minimum",params:{comparison: ">=", limit: -180},message:"must be >= -180"}];return false;}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/longitude_ddeg",schemaPath:"#/properties/measurement_location/items/properties/longitude_ddeg/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}}var valid2 = _errs23 === errors;}else {var valid2 = true;}if(valid2){if(data7.measurement_station_type_id !== undefined){let data11 = data7.measurement_station_type_id;const _errs25 = errors;if(typeof data11 !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_station_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_station_type_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(((((data11 === "mast") || (data11 === "lidar")) || (data11 === "sodar")) || (data11 === "floating_lidar")) || (data11 === "solar"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_station_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_station_type_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_station_type_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs25 === errors;}else {var valid2 = true;}if(valid2){if(data7.notes !== undefined){let data12 = data7.notes;const _errs27 = errors;if((typeof data12 !== "string") && (data12 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/notes",schemaPath:"#/properties/measurement_location/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.notes.type},message:"must be string,null"}];return false;}var valid2 = _errs27 === errors;}else {var valid2 = true;}if(valid2){if(data7.update_at !== undefined){let data13 = data7.update_at;const _errs29 = errors;if((typeof data13 !== "string") && (data13 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs29){if(errors === _errs29){if(typeof data13 === "string"){if(!(formats2.validate(data13))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid2 = _errs29 === errors;}else {var valid2 = true;}if(valid2){if(data7.mast_properties !== undefined){let data14 = data7.mast_properties;const _errs31 = errors;if((!(data14 && typeof data14 == "object" && !Array.isArray(data14))) && (data14 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.type},message:"must be object,null"}];return false;}if(errors === _errs31){if(data14 && typeof data14 == "object" && !Array.isArray(data14)){if(data14.mast_geometry_id !== undefined){let data15 = data14.mast_geometry_id;const _errs34 = errors;if((typeof data15 !== "string") && (data15 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_geometry_id",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_geometry_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_geometry_id.type},message:"must be string,null"}];return false;}if(!(((((data15 === "lattice_triangle") || (data15 === "lattice_square_round_edges")) || (data15 === "lattice_square_sharp_edges")) || (data15 === "pole")) || (data15 === null))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_geometry_id",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_geometry_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_geometry_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs34 === errors;}else {var valid3 = true;}if(valid3){if(data14.mast_oem !== undefined){let data16 = data14.mast_oem;const _errs36 = errors;if((typeof data16 !== "string") && (data16 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_oem",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_oem/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_oem.type},message:"must be string,null"}];return false;}var valid3 = _errs36 === errors;}else {var valid3 = true;}if(valid3){if(data14.mast_serial_number !== undefined){let data17 = data14.mast_serial_number;const _errs38 = errors;if((typeof data17 !== "string") && (data17 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_serial_number",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_serial_number/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_serial_number.type},message:"must be string,null"}];return false;}var valid3 = _errs38 === errors;}else {var valid3 = true;}if(valid3){if(data14.mast_model !== undefined){let data18 = data14.mast_model;const _errs40 = errors;if((typeof data18 !== "string") && (data18 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_model",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_model/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_model.type},message:"must be string,null"}];return false;}var valid3 = _errs40 === errors;}else {var valid3 = true;}if(valid3){if(data14.mast_height_m !== undefined){let data19 = data14.mast_height_m;const _errs42 = errors;if((!((typeof data19 == "number") && (isFinite(data19)))) && (data19 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_height_m",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_height_m/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_height_m.type},message:"must be number,null"}];return false;}var valid3 = _errs42 === errors;}else {var valid3 = true;}if(valid3){if(data14.date_from !== undefined){let data20 = data14.date_from;const _errs44 = errors;if((typeof data20 !== "string") && (data20 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/date_from",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/date_from/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.date_from.type},message:"must be string,null"}];return false;}if(errors === _errs44){if(errors === _errs44){if(typeof data20 === "string"){if(!(formats2.validate(data20))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/date_from",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/date_from/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid3 = _errs44 === errors;}else {var valid3 = true;}if(valid3){if(data14.date_to !== undefined){let data21 = data14.date_to;const _errs46 = errors;if((typeof data21 !== "string") && (data21 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/date_to",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/date_to/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.date_to.type},message:"must be string,null"}];return false;}if(errors === _errs46){if(errors === _errs46){if(typeof data21 === "string"){if(!(formats2.validate(data21))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/date_to",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/date_to/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid3 = _errs46 === errors;}else {var valid3 = true;}if(valid3){if(data14.notes !== undefined){let data22 = data14.notes;const _errs48 = errors;if((typeof data22 !== "string") && (data22 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/notes",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.notes.type},message:"must be string,null"}];return false;}var valid3 = _errs48 === errors;}else {var valid3 = true;}if(valid3){if(data14.update_at !== undefined){let data23 = data14.update_at;const _errs50 = errors;if((typeof data23 !== "string") && (data23 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/update_at",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs50){if(errors === _errs50){if(typeof data23 === "string"){if(!(formats2.validate(data23))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/update_at",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid3 = _errs50 === errors;}else {var valid3 = true;}if(valid3){if(data14.mast_section_geometry !== undefined){let data24 = data14.mast_section_geometry;const _errs52 = errors;if((!(Array.isArray(data24))) && (data24 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.type},message:"must be array,null"}];return false;}if(errors === _errs52){if(Array.isArray(data24)){var valid4 = true;const len1 = data24.length;for(let i1=0; i1<len1; i1++){let data25 = data24[i1];const _errs54 = errors;if(errors === _errs54){if(data25 && typeof data25 == "object" && !Array.isArray(data25)){if(data25.uuid !== undefined){let data26 = data25.uuid;const _errs57 = errors;if((typeof data26 !== "string") && (data26 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/uuid",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/uuid/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.uuid.type},message:"must be string,null"}];return false;}if(errors === _errs57){if(errors === _errs57){if(typeof data26 === "string"){if(!(formats10.test(data26))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/uuid",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/uuid/format",keyword:"format",params:{format: "uuid"},message:"must match format \""+"uuid"+"\""}];return false;}}}}var valid5 = _errs57 === errors;}else {var valid5 = true;}if(valid5){if(data25.mast_section_height_mm !== undefined){let data27 = data25.mast_section_height_mm;const _errs59 = errors;if((!((typeof data27 == "number") && (isFinite(data27)))) && (data27 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/mast_section_height_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/mast_section_height_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.mast_section_height_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs59 === errors;}else {var valid5 = true;}if(valid5){if(data25.pole_diameter_mm !== undefined){let data28 = data25.pole_diameter_mm;const _errs61 = errors;if((!((typeof data28 == "number") && (isFinite(data28)))) && (data28 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/pole_diameter_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/pole_diameter_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.pole_diameter_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs61 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_face_width_at_bottom_mm !== undefined){let data29 = data25.lattice_face_width_at_bottom_mm;const _errs63 = errors;if((!((typeof data29 == "number") && (isFinite(data29)))) && (data29 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_face_width_at_bottom_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_face_width_at_bottom_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_face_width_at_bottom_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs63 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_face_width_at_top_mm !== undefined){let data30 = data25.lattice_face_width_at_top_mm;const _errs65 = errors;if((!((typeof data30 == "number") && (isFinite(data30)))) && (data30 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_face_width_at_top_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_face_width_at_top_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_face_width_at_top_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs65 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_leg_width_mm !== undefined){let data31 = data25.lattice_leg_width_mm;const _errs67 = errors;if((!((typeof data31 == "number") && (isFinite(data31)))) && (data31 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_leg_width_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_leg_width_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_leg_width_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs67 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_leg_is_round_cross_section !== undefined){let data32 = data25.lattice_leg_is_round_cross_section;const _errs69 = errors;if((typeof data32 !== "boolean") && (data32 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_leg_is_round_cross_section",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_leg_is_round_cross_section/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_leg_is_round_cross_section.type},message:"must be boolean,null"}];return false;}var valid5 = _errs69 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_bracing_member_diameter_mm !== undefined){let data33 = data25.lattice_bracing_member_diameter_mm;const _errs71 = errors;if((!((typeof data33 == "number") && (isFinite(data33)))) && (data33 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_bracing_member_diameter_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_bracing_member_diameter_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_bracing_member_diameter_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs71 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_bracing_member_diameter_horizontal_mm !== undefined){let data34 = data25.lattice_bracing_member_diameter_horizontal_mm;const _errs73 = errors;if((!((typeof data34 == "number") && (isFinite(data34)))) && (data34 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_bracing_member_diameter_horizontal_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_bracing_member_diameter_horizontal_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_bracing_member_diameter_horizontal_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs73 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_bracing_member_diameter_diagonal_mm !== undefined){let data35 = data25.lattice_bracing_member_diameter_diagonal_mm;const _errs75 = errors;if((!((typeof data35 == "number") && (isFinite(data35)))) && (data35 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_bracing_member_diameter_diagonal_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_bracing_member_diameter_diagonal_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_bracing_member_diameter_diagonal_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs75 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_number_of_diagonal_bracing_members !== undefined){let data36 = data25.lattice_number_of_diagonal_bracing_members;const _errs77 = errors;if((!(((typeof data36 == "number") && (!(data36 % 1) && !isNaN(data36))) && (isFinite(data36)))) && (data36 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_number_of_diagonal_bracing_members",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_number_of_diagonal_bracing_members/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_number_of_diagonal_bracing_members.type},message:"must be integer,null"}];return false;}var valid5 = _errs77 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_bracing_member_length_diagonal_mm !== undefined){let data37 = data25.lattice_bracing_member_length_diagonal_mm;const _errs79 = errors;if((!((typeof data37 == "number") && (isFinite(data37)))) && (data37 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_bracing_member_length_diagonal_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_bracing_member_length_diagonal_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_bracing_member_length_diagonal_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs79 === errors;}else {var valid5 = true;}if(valid5){if(data25.number_of_repetitive_patterns_on_face !== undefined){let data38 = data25.number_of_repetitive_patterns_on_face;const _errs81 = errors;if((!(((typeof data38 == "number") && (!(data38 % 1) && !isNaN(data38))) && (isFinite(data38)))) && (data38 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/number_of_repetitive_patterns_on_face",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/number_of_repetitive_patterns_on_face/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.number_of_repetitive_patterns_on_face.type},message:"must be integer,null"}];return false;}var valid5 = _errs81 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_bracing_member_height_mm !== undefined){let data39 = data25.lattice_bracing_member_height_mm;const _errs83 = errors;if((!((typeof data39 == "number") && (isFinite(data39)))) && (data39 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_bracing_member_height_mm",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_bracing_member_height_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_bracing_member_height_mm.type},message:"must be number,null"}];return false;}var valid5 = _errs83 === errors;}else {var valid5 = true;}if(valid5){if(data25.lattice_has_horizontal_member !== undefined){let data40 = data25.lattice_has_horizontal_member;const _errs85 = errors;if((typeof data40 !== "boolean") && (data40 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/lattice_has_horizontal_member",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/lattice_has_horizontal_member/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.lattice_has_horizontal_member.type},message:"must be boolean,null"}];return false;}var valid5 = _errs85 === errors;}else {var valid5 = true;}if(valid5){if(data25.notes !== undefined){let data41 = data25.notes;const _errs87 = errors;if((typeof data41 !== "string") && (data41 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/notes",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.notes.type},message:"must be string,null"}];return false;}var valid5 = _errs87 === errors;}else {var valid5 = true;}if(valid5){if(data25.update_at !== undefined){let data42 = data25.update_at;const _errs89 = errors;if((typeof data42 !== "string") && (data42 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.mast_properties.properties.mast_section_geometry.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs89){if(errors === _errs89){if(typeof data42 === "string"){if(!(formats2.validate(data42))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid5 = _errs89 === errors;}else {var valid5 = true;}}}}}}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry/" + i1,schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid4 = _errs54 === errors;if(!valid4){break;}}if(valid4){let i2 = data24.length;let j0;if(i2 > 1){outer0:for(;i2--;){for(j0 = i2; j0--;){if(func0(data24[i2], data24[j0])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/mast_properties/mast_section_geometry",schemaPath:"#/properties/measurement_location/items/properties/mast_properties/properties/mast_section_geometry/uniqueItems",keyword:"uniqueItems",params:{i: i2, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i2+" are identical)"}];return false;break outer0;}}}}}}}var valid3 = _errs52 === errors;}else {var valid3 = true;}}}}}}}}}}}}var valid2 = _errs31 === errors;}else {var valid2 = true;}if(valid2){if(data7.vertical_profiler_properties !== undefined){let data43 = data7.vertical_profiler_properties;const _errs91 = errors;if((!(Array.isArray(data43))) && (data43 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.type},message:"must be array,null"}];return false;}if(errors === _errs91){if(Array.isArray(data43)){var valid7 = true;const len2 = data43.length;for(let i3=0; i3<len2; i3++){let data44 = data43[i3];const _errs93 = errors;if(errors === _errs93){if(data44 && typeof data44 == "object" && !Array.isArray(data44)){const _errs95 = errors;for(const key1 in data44){if(!(func2.call(schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties, key1))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3,schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs95 === errors){if(data44.device_datum_plane_height_m !== undefined){let data45 = data44.device_datum_plane_height_m;const _errs96 = errors;if((!((typeof data45 == "number") && (isFinite(data45)))) && (data45 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/device_datum_plane_height_m",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/device_datum_plane_height_m/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.device_datum_plane_height_m.type},message:"must be number,null"}];return false;}var valid8 = _errs96 === errors;}else {var valid8 = true;}if(valid8){if(data44.height_reference_id !== undefined){let data46 = data44.height_reference_id;const _errs98 = errors;if((typeof data46 !== "string") && (data46 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/height_reference_id",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/height_reference_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.height_reference_id.type},message:"must be string,null"}];return false;}if(!((((((data46 === "ground_level") || (data46 === "mean_sea_level")) || (data46 === "sea_level")) || (data46 === "lowest_astronomical_tide")) || (data46 === "sea_floor")) || (data46 === "other"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/height_reference_id",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/height_reference_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.height_reference_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid8 = _errs98 === errors;}else {var valid8 = true;}if(valid8){if(data44.device_orientation_deg !== undefined){let data47 = data44.device_orientation_deg;const _errs100 = errors;if((!((typeof data47 == "number") && (isFinite(data47)))) && (data47 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/device_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/device_orientation_deg/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.device_orientation_deg.type},message:"must be number,null"}];return false;}if(errors === _errs100){if((typeof data47 == "number") && (isFinite(data47))){if(data47 > 360 || isNaN(data47)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/device_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/device_orientation_deg/maximum",keyword:"maximum",params:{comparison: "<=", limit: 360},message:"must be <= 360"}];return false;}else {if(data47 < 0 || isNaN(data47)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/device_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/device_orientation_deg/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}}var valid8 = _errs100 === errors;}else {var valid8 = true;}if(valid8){if(data44.orientation_reference_id !== undefined){let data48 = data44.orientation_reference_id;const _errs102 = errors;if((typeof data48 !== "string") && (data48 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/orientation_reference_id",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/orientation_reference_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.orientation_reference_id.type},message:"must be string,null"}];return false;}if(!((((data48 === "magnetic_north") || (data48 === "true_north")) || (data48 === "grid_north")) || (data48 === null))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/orientation_reference_id",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/orientation_reference_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.orientation_reference_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid8 = _errs102 === errors;}else {var valid8 = true;}if(valid8){if(data44.device_vertical_orientation !== undefined){let data49 = data44.device_vertical_orientation;const _errs104 = errors;if((typeof data49 !== "string") && (data49 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/device_vertical_orientation",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/device_vertical_orientation/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.device_vertical_orientation.type},message:"must be string,null"}];return false;}if(!(((data49 === "upward") || (data49 === "downward")) || (data49 === null))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/device_vertical_orientation",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/device_vertical_orientation/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.device_vertical_orientation.enum},message:"must be equal to one of the allowed values"}];return false;}var valid8 = _errs104 === errors;}else {var valid8 = true;}if(valid8){if(data44.date_from !== undefined){let data50 = data44.date_from;const _errs106 = errors;if((typeof data50 !== "string") && (data50 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/date_from/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.date_from.type},message:"must be string,null"}];return false;}if(errors === _errs106){if(errors === _errs106){if(typeof data50 === "string"){if(!(formats2.validate(data50))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/date_from/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid8 = _errs106 === errors;}else {var valid8 = true;}if(valid8){if(data44.date_to !== undefined){let data51 = data44.date_to;const _errs108 = errors;if((typeof data51 !== "string") && (data51 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/date_to/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.date_to.type},message:"must be string,null"}];return false;}if(errors === _errs108){if(errors === _errs108){if(typeof data51 === "string"){if(!(formats2.validate(data51))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/date_to/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid8 = _errs108 === errors;}else {var valid8 = true;}if(valid8){if(data44.notes !== undefined){let data52 = data44.notes;const _errs110 = errors;if((typeof data52 !== "string") && (data52 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/notes",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.notes.type},message:"must be string,null"}];return false;}var valid8 = _errs110 === errors;}else {var valid8 = true;}if(valid8){if(data44.update_at !== undefined){let data53 = data44.update_at;const _errs112 = errors;if((typeof data53 !== "string") && (data53 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.vertical_profiler_properties.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs112){if(errors === _errs112){if(typeof data53 === "string"){if(!(formats2.validate(data53))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid8 = _errs112 === errors;}else {var valid8 = true;}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties/" + i3,schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid7 = _errs93 === errors;if(!valid7){break;}}if(valid7){let i4 = data43.length;let j1;if(i4 > 1){outer1:for(;i4--;){for(j1 = i4; j1--;){if(func0(data43[i4], data43[j1])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/vertical_profiler_properties",schemaPath:"#/properties/measurement_location/items/properties/vertical_profiler_properties/uniqueItems",keyword:"uniqueItems",params:{i: i4, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i4+" are identical)"}];return false;break outer1;}}}}}}}var valid2 = _errs91 === errors;}else {var valid2 = true;}if(valid2){if(data7.logger_main_config !== undefined){let data54 = data7.logger_main_config;const _errs114 = errors;if(errors === _errs114){if(Array.isArray(data54)){var valid10 = true;const len3 = data54.length;for(let i5=0; i5<len3; i5++){let data55 = data54[i5];const _errs116 = errors;if(errors === _errs116){if(data55 && typeof data55 == "object" && !Array.isArray(data55)){let missing2;if(((((data55.date_from === undefined) && (missing2 = "date_from")) || ((data55.date_to === undefined) && (missing2 = "date_to"))) || ((data55.logger_oem_id === undefined) && (missing2 = "logger_oem_id"))) || ((data55.logger_serial_number === undefined) && (missing2 = "logger_serial_number"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5,schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {if(data55.logger_oem_id !== undefined){let data56 = data55.logger_oem_id;const _errs119 = errors;if(typeof data56 !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/logger_oem_id",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/logger_oem_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((((((((((((data56 === "NRG Systems") || (data56 === "Ammonit")) || (data56 === "Campbell Scientific")) || (data56 === "Vaisala")) || (data56 === "SecondWind")) || (data56 === "Kintech")) || (data56 === "Wilmers")) || (data56 === "Unidata")) || (data56 === "WindLogger")) || (data56 === "Leosphere")) || (data56 === "ZX Lidars")) || (data56 === "AXYS Technologies")) || (data56 === "AQSystem")) || (data56 === "Pentaluum")) || (data56 === "Nortek")) || (data56 === "Teledyne RDI")) || (data56 === "Aanderaa")) || (data56 === "Other"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/logger_oem_id",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/logger_oem_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.logger_oem_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid11 = _errs119 === errors;}else {var valid11 = true;}if(valid11){if(data55.logger_model_name !== undefined){let data57 = data55.logger_model_name;const _errs121 = errors;if((typeof data57 !== "string") && (data57 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/logger_model_name",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/logger_model_name/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.logger_model_name.type},message:"must be string,null"}];return false;}var valid11 = _errs121 === errors;}else {var valid11 = true;}if(valid11){if(data55.logger_serial_number !== undefined){const _errs123 = errors;if(typeof data55.logger_serial_number !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/logger_serial_number",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/logger_serial_number/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid11 = _errs123 === errors;}else {var valid11 = true;}if(valid11){if(data55.logger_firmware_version !== undefined){let data59 = data55.logger_firmware_version;const _errs125 = errors;if((typeof data59 !== "string") && (data59 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/logger_firmware_version",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/logger_firmware_version/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.logger_firmware_version.type},message:"must be string,null"}];return false;}var valid11 = _errs125 === errors;}else {var valid11 = true;}if(valid11){if(data55.logger_id !== undefined){let data60 = data55.logger_id;const _errs127 = errors;if((typeof data60 !== "string") && (data60 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/logger_id",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/logger_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.logger_id.type},message:"must be string,null"}];return false;}var valid11 = _errs127 === errors;}else {var valid11 = true;}if(valid11){if(data55.logger_name !== undefined){let data61 = data55.logger_name;const _errs129 = errors;if((typeof data61 !== "string") && (data61 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/logger_name",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/logger_name/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.logger_name.type},message:"must be string,null"}];return false;}var valid11 = _errs129 === errors;}else {var valid11 = true;}if(valid11){if(data55.date_from !== undefined){let data62 = data55.date_from;const _errs131 = errors;if(errors === _errs131){if(errors === _errs131){if(typeof data62 === "string"){if(!(formats2.validate(data62))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/date_from/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/date_from/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid11 = _errs131 === errors;}else {var valid11 = true;}if(valid11){if(data55.date_to !== undefined){let data63 = data55.date_to;const _errs133 = errors;if((typeof data63 !== "string") && (data63 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/date_to/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.date_to.type},message:"must be string,null"}];return false;}if(errors === _errs133){if(errors === _errs133){if(typeof data63 === "string"){if(!(formats2.validate(data63))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/date_to/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid11 = _errs133 === errors;}else {var valid11 = true;}if(valid11){if(data55.encryption_pin_or_key !== undefined){let data64 = data55.encryption_pin_or_key;const _errs135 = errors;if((typeof data64 !== "string") && (data64 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/encryption_pin_or_key",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/encryption_pin_or_key/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.encryption_pin_or_key.type},message:"must be string,null"}];return false;}var valid11 = _errs135 === errors;}else {var valid11 = true;}if(valid11){if(data55.enclosure_lock_details !== undefined){let data65 = data55.enclosure_lock_details;const _errs137 = errors;if((typeof data65 !== "string") && (data65 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/enclosure_lock_details",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/enclosure_lock_details/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.enclosure_lock_details.type},message:"must be string,null"}];return false;}var valid11 = _errs137 === errors;}else {var valid11 = true;}if(valid11){if(data55.data_transfer_details !== undefined){let data66 = data55.data_transfer_details;const _errs139 = errors;if((typeof data66 !== "string") && (data66 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/data_transfer_details",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/data_transfer_details/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.data_transfer_details.type},message:"must be string,null"}];return false;}var valid11 = _errs139 === errors;}else {var valid11 = true;}if(valid11){if(data55.offset_from_utc_hrs !== undefined){let data67 = data55.offset_from_utc_hrs;const _errs141 = errors;if((!((typeof data67 == "number") && (isFinite(data67)))) && (data67 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/offset_from_utc_hrs",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/offset_from_utc_hrs/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.offset_from_utc_hrs.type},message:"must be number,null"}];return false;}var valid11 = _errs141 === errors;}else {var valid11 = true;}if(valid11){if(data55.sampling_rate_sec !== undefined){let data68 = data55.sampling_rate_sec;const _errs143 = errors;if((!(((typeof data68 == "number") && (!(data68 % 1) && !isNaN(data68))) && (isFinite(data68)))) && (data68 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/sampling_rate_sec",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/sampling_rate_sec/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.sampling_rate_sec.type},message:"must be integer,null"}];return false;}var valid11 = _errs143 === errors;}else {var valid11 = true;}if(valid11){if(data55.averaging_period_minutes !== undefined){let data69 = data55.averaging_period_minutes;const _errs145 = errors;if((!(((typeof data69 == "number") && (!(data69 % 1) && !isNaN(data69))) && (isFinite(data69)))) && (data69 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/averaging_period_minutes",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/averaging_period_minutes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.averaging_period_minutes.type},message:"must be integer,null"}];return false;}var valid11 = _errs145 === errors;}else {var valid11 = true;}if(valid11){if(data55.timestamp_is_end_of_period !== undefined){let data70 = data55.timestamp_is_end_of_period;const _errs147 = errors;if((typeof data70 !== "boolean") && (data70 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/timestamp_is_end_of_period",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/timestamp_is_end_of_period/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.timestamp_is_end_of_period.type},message:"must be boolean,null"}];return false;}var valid11 = _errs147 === errors;}else {var valid11 = true;}if(valid11){if(data55.clock_is_auto_synced !== undefined){let data71 = data55.clock_is_auto_synced;const _errs149 = errors;if((typeof data71 !== "boolean") && (data71 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/clock_is_auto_synced",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/clock_is_auto_synced/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.clock_is_auto_synced.type},message:"must be boolean,null"}];return false;}var valid11 = _errs149 === errors;}else {var valid11 = true;}if(valid11){if(data55.logger_acquisition_uncertainty !== undefined){let data72 = data55.logger_acquisition_uncertainty;const _errs151 = errors;if((!((typeof data72 == "number") && (isFinite(data72)))) && (data72 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/logger_acquisition_uncertainty",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/logger_acquisition_uncertainty/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.logger_acquisition_uncertainty.type},message:"must be number,null"}];return false;}var valid11 = _errs151 === errors;}else {var valid11 = true;}if(valid11){if(data55.uncertainty_k_factor !== undefined){let data73 = data55.uncertainty_k_factor;const _errs153 = errors;if((!((typeof data73 == "number") && (isFinite(data73)))) && (data73 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/uncertainty_k_factor",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/uncertainty_k_factor/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.uncertainty_k_factor.type},message:"must be number,null"}];return false;}var valid11 = _errs153 === errors;}else {var valid11 = true;}if(valid11){if(data55.notes !== undefined){let data74 = data55.notes;const _errs155 = errors;if((typeof data74 !== "string") && (data74 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/notes",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.notes.type},message:"must be string,null"}];return false;}var valid11 = _errs155 === errors;}else {var valid11 = true;}if(valid11){if(data55.update_at !== undefined){let data75 = data55.update_at;const _errs157 = errors;if((typeof data75 !== "string") && (data75 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs157){if(errors === _errs157){if(typeof data75 === "string"){if(!(formats2.validate(data75))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid11 = _errs157 === errors;}else {var valid11 = true;}if(valid11){if(data55.lidar_config !== undefined){let data76 = data55.lidar_config;const _errs159 = errors;if((!(Array.isArray(data76))) && (data76 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.lidar_config.type},message:"must be array,null"}];return false;}if(errors === _errs159){if(Array.isArray(data76)){var valid12 = true;const len4 = data76.length;for(let i6=0; i6<len4; i6++){let data77 = data76[i6];const _errs161 = errors;if(errors === _errs161){if(data77 && typeof data77 == "object" && !Array.isArray(data77)){const _errs163 = errors;for(const key2 in data77){if(!(((((key2 === "flow_corrections_applied") || (key2 === "date_from")) || (key2 === "date_to")) || (key2 === "notes")) || (key2 === "update_at"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6,schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];return false;break;}}if(_errs163 === errors){if(data77.flow_corrections_applied !== undefined){let data78 = data77.flow_corrections_applied;const _errs164 = errors;if((typeof data78 !== "boolean") && (data78 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6+"/flow_corrections_applied",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/properties/flow_corrections_applied/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.lidar_config.items.properties.flow_corrections_applied.type},message:"must be boolean,null"}];return false;}var valid13 = _errs164 === errors;}else {var valid13 = true;}if(valid13){if(data77.date_from !== undefined){let data79 = data77.date_from;const _errs166 = errors;if((typeof data79 !== "string") && (data79 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/properties/date_from/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.lidar_config.items.properties.date_from.type},message:"must be string,null"}];return false;}if(errors === _errs166){if(errors === _errs166){if(typeof data79 === "string"){if(!(formats2.validate(data79))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/properties/date_from/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid13 = _errs166 === errors;}else {var valid13 = true;}if(valid13){if(data77.date_to !== undefined){let data80 = data77.date_to;const _errs168 = errors;if((typeof data80 !== "string") && (data80 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/properties/date_to/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.lidar_config.items.properties.date_to.type},message:"must be string,null"}];return false;}if(errors === _errs168){if(errors === _errs168){if(typeof data80 === "string"){if(!(formats2.validate(data80))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/properties/date_to/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid13 = _errs168 === errors;}else {var valid13 = true;}if(valid13){if(data77.notes !== undefined){let data81 = data77.notes;const _errs170 = errors;if((typeof data81 !== "string") && (data81 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6+"/notes",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.lidar_config.items.properties.notes.type},message:"must be string,null"}];return false;}var valid13 = _errs170 === errors;}else {var valid13 = true;}if(valid13){if(data77.update_at !== undefined){let data82 = data77.update_at;const _errs172 = errors;if((typeof data82 !== "string") && (data82 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.logger_main_config.items.properties.lidar_config.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs172){if(errors === _errs172){if(typeof data82 === "string"){if(!(formats2.validate(data82))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid13 = _errs172 === errors;}else {var valid13 = true;}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config/" + i6,schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid12 = _errs161 === errors;if(!valid12){break;}}if(valid12){let i7 = data76.length;let j2;if(i7 > 1){outer2:for(;i7--;){for(j2 = i7; j2--;){if(func0(data76[i7], data76[j2])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5+"/lidar_config",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/properties/lidar_config/uniqueItems",keyword:"uniqueItems",params:{i: i7, j: j2},message:"must NOT have duplicate items (items ## "+j2+" and "+i7+" are identical)"}];return false;break outer2;}}}}}}}var valid11 = _errs159 === errors;}else {var valid11 = true;}}}}}}}}}}}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config/" + i5,schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid10 = _errs116 === errors;if(!valid10){break;}}if(valid10){let i8 = data54.length;let j3;if(i8 > 1){outer3:for(;i8--;){for(j3 = i8; j3--;){if(func0(data54[i8], data54[j3])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/uniqueItems",keyword:"uniqueItems",params:{i: i8, j: j3},message:"must NOT have duplicate items (items ## "+j3+" and "+i8+" are identical)"}];return false;break outer3;}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/logger_main_config",schemaPath:"#/properties/measurement_location/items/properties/logger_main_config/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid2 = _errs114 === errors;}else {var valid2 = true;}if(valid2){if(data7.measurement_point !== undefined){let data83 = data7.measurement_point;const _errs174 = errors;if(errors === _errs174){if(Array.isArray(data83)){var valid16 = true;const len5 = data83.length;for(let i9=0; i9<len5; i9++){let data84 = data83[i9];const _errs176 = errors;if(errors === _errs176){if(data84 && typeof data84 == "object" && !Array.isArray(data84)){let missing3;if(((((data84.name === undefined) && (missing3 = "name")) || ((data84.measurement_type_id === undefined) && (missing3 = "measurement_type_id"))) || ((data84.height_m === undefined) && (missing3 = "height_m"))) || ((data84.logger_measurement_config === undefined) && (missing3 = "logger_measurement_config"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];return false;}else {const _errs178 = errors;for(const key3 in data84){if(!(func2.call(schema11.properties.measurement_location.items.properties.measurement_point.items.properties, key3))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];return false;break;}}if(_errs178 === errors){if(data84.name !== undefined){const _errs179 = errors;if(typeof data84.name !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/name",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs179 === errors;}else {var valid17 = true;}if(valid17){if(data84.measurement_type_id !== undefined){let data86 = data84.measurement_type_id;const _errs181 = errors;if(typeof data86 !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/measurement_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/measurement_type_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data86 === "wind_speed") || (data86 === "wind_direction")) || (data86 === "air_temperature")) || (data86 === "water_temperature")) || (data86 === "temperature")) || (data86 === "air_pressure")) || (data86 === "air_density")) || (data86 === "relative_humidity")) || (data86 === "voltage")) || (data86 === "current")) || (data86 === "resistance")) || (data86 === "power")) || (data86 === "energy")) || (data86 === "vertical_wind_speed")) || (data86 === "wind_speed_turbulence")) || (data86 === "precipitation")) || (data86 === "ice_detection")) || (data86 === "global_horizontal_irradiance")) || (data86 === "direct_normal_irradiance")) || (data86 === "diffuse_horizontal_irradiance")) || (data86 === "global_tilted_irradiance")) || (data86 === "global_normal_irradiance")) || (data86 === "albedo")) || (data86 === "soiling_loss_index")) || (data86 === "illuminance")) || (data86 === "fog")) || (data86 === "salinity")) || (data86 === "conductivity")) || (data86 === "pressure")) || (data86 === "gps_coordinates")) || (data86 === "status")) || (data86 === "flag")) || (data86 === "counter")) || (data86 === "availability")) || (data86 === "quality")) || (data86 === "carrier_to_noise_ratio")) || (data86 === "doppler_spectral_broadening")) || (data86 === "echo_intensity")) || (data86 === "signal_to_noise_ratio")) || (data86 === "motion_corrected_wind_speed")) || (data86 === "motion_corrected_wind_direction")) || (data86 === "motion_corrected_vertical_wind_speed")) || (data86 === "wave_height")) || (data86 === "wave_significant_height")) || (data86 === "wave_maximum_height")) || (data86 === "wave_direction")) || (data86 === "wave_directional_spread")) || (data86 === "wave_period")) || (data86 === "wave_peak_period")) || (data86 === "water_speed")) || (data86 === "vertical_water_speed")) || (data86 === "water_direction")) || (data86 === "orientation")) || (data86 === "compass_direction")) || (data86 === "true_north_offset")) || (data86 === "tilt")) || (data86 === "tilt_x")) || (data86 === "tilt_y")) || (data86 === "tilt_z")) || (data86 === "u")) || (data86 === "v")) || (data86 === "w")) || (data86 === "elevation")) || (data86 === "altitude")) || (data86 === "height")) || (data86 === "azimuth")) || (data86 === "water_level")) || (data86 === "depth")) || (data86 === "timestamp")) || (data86 === "other"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/measurement_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/measurement_type_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.measurement_type_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid17 = _errs181 === errors;}else {var valid17 = true;}if(valid17){if(data84.height_m !== undefined){let data87 = data84.height_m;const _errs183 = errors;if((!((typeof data87 == "number") && (isFinite(data87)))) && (data87 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/height_m",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/height_m/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.height_m.type},message:"must be number,null"}];return false;}var valid17 = _errs183 === errors;}else {var valid17 = true;}if(valid17){if(data84.height_reference_id !== undefined){let data88 = data84.height_reference_id;const _errs185 = errors;if((typeof data88 !== "string") && (data88 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/height_reference_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/height_reference_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.height_reference_id.type},message:"must be string,null"}];return false;}if(!((((((data88 === "ground_level") || (data88 === "mean_sea_level")) || (data88 === "sea_level")) || (data88 === "lowest_astronomical_tide")) || (data88 === "sea_floor")) || (data88 === "other"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/height_reference_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/height_reference_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.height_reference_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid17 = _errs185 === errors;}else {var valid17 = true;}if(valid17){if(data84.notes !== undefined){let data89 = data84.notes;const _errs187 = errors;if((typeof data89 !== "string") && (data89 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/notes",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.notes.type},message:"must be string,null"}];return false;}var valid17 = _errs187 === errors;}else {var valid17 = true;}if(valid17){if(data84.update_at !== undefined){let data90 = data84.update_at;const _errs189 = errors;if((typeof data90 !== "string") && (data90 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs189){if(errors === _errs189){if(typeof data90 === "string"){if(!(formats2.validate(data90))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid17 = _errs189 === errors;}else {var valid17 = true;}if(valid17){if(data84.logger_measurement_config !== undefined){let data91 = data84.logger_measurement_config;const _errs191 = errors;if(errors === _errs191){if(Array.isArray(data91)){var valid18 = true;const len6 = data91.length;for(let i10=0; i10<len6; i10++){let data92 = data91[i10];const _errs193 = errors;if(errors === _errs193){if(data92 && typeof data92 == "object" && !Array.isArray(data92)){let missing4;if((((data92.column_name === undefined) && (missing4 = "column_name")) || ((data92.date_from === undefined) && (missing4 = "date_from"))) || ((data92.date_to === undefined) && (missing4 = "date_to"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];return false;}else {const _errs195 = errors;for(const key4 in data92){if(!(func2.call(schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties, key4))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];return false;break;}}if(_errs195 === errors){if(data92.slope !== undefined){let data93 = data92.slope;const _errs196 = errors;if((!((typeof data93 == "number") && (isFinite(data93)))) && (data93 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/slope",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/slope/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.slope.type},message:"must be number,null"}];return false;}var valid19 = _errs196 === errors;}else {var valid19 = true;}if(valid19){if(data92.offset !== undefined){let data94 = data92.offset;const _errs198 = errors;if((!((typeof data94 == "number") && (isFinite(data94)))) && (data94 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/offset",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/offset/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.offset.type},message:"must be number,null"}];return false;}var valid19 = _errs198 === errors;}else {var valid19 = true;}if(valid19){if(data92.sensitivity !== undefined){let data95 = data92.sensitivity;const _errs200 = errors;if((!((typeof data95 == "number") && (isFinite(data95)))) && (data95 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/sensitivity",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/sensitivity/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.sensitivity.type},message:"must be number,null"}];return false;}var valid19 = _errs200 === errors;}else {var valid19 = true;}if(valid19){if(data92.measurement_units_id !== undefined){let data96 = data92.measurement_units_id;const _errs202 = errors;if((typeof data96 !== "string") && (data96 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/measurement_units_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/measurement_units_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.measurement_units_id.type},message:"must be string,null"}];return false;}if(!(((((((((((((((((((((((((((((((((((((((((data96 === "m/s") || (data96 === "mph")) || (data96 === "knots")) || (data96 === "deg")) || (data96 === "deg_C")) || (data96 === "deg_F")) || (data96 === "K")) || (data96 === "%")) || (data96 === "mbar")) || (data96 === "dbar")) || (data96 === "hPa")) || (data96 === "atm")) || (data96 === "mmHg")) || (data96 === "inHg")) || (data96 === "kg/m^2")) || (data96 === "kg/m^3")) || (data96 === "V")) || (data96 === "mA")) || (data96 === "A")) || (data96 === "ohm")) || (data96 === "Hz")) || (data96 === "mm")) || (data96 === "m")) || (data96 === "s")) || (data96 === "W/m^2")) || (data96 === "W")) || (data96 === "kW")) || (data96 === "MW")) || (data96 === "kWh")) || (data96 === "MWh")) || (data96 === "m/s^2")) || (data96 === "lux")) || (data96 === "dB")) || (data96 === "L")) || (data96 === "g/L")) || (data96 === "g/kg")) || (data96 === "ppt")) || (data96 === "psu")) || (data96 === "S/m")) || (data96 === "-")) || (data96 === null))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/measurement_units_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/measurement_units_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.measurement_units_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid19 = _errs202 === errors;}else {var valid19 = true;}if(valid19){if(data92.height_m !== undefined){let data97 = data92.height_m;const _errs204 = errors;if((!((typeof data97 == "number") && (isFinite(data97)))) && (data97 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/height_m",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/height_m/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.height_m.type},message:"must be number,null"}];return false;}var valid19 = _errs204 === errors;}else {var valid19 = true;}if(valid19){if(data92.serial_number !== undefined){let data98 = data92.serial_number;const _errs206 = errors;if((typeof data98 !== "string") && (data98 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/serial_number",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/serial_number/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.serial_number.type},message:"must be string,null"}];return false;}var valid19 = _errs206 === errors;}else {var valid19 = true;}if(valid19){if(data92.connection_channel !== undefined){let data99 = data92.connection_channel;const _errs208 = errors;if((typeof data99 !== "string") && (data99 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/connection_channel",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/connection_channel/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.connection_channel.type},message:"must be string,null"}];return false;}var valid19 = _errs208 === errors;}else {var valid19 = true;}if(valid19){if(data92.logger_stated_boom_orientation_deg !== undefined){let data100 = data92.logger_stated_boom_orientation_deg;const _errs210 = errors;if((!((typeof data100 == "number") && (isFinite(data100)))) && (data100 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/logger_stated_boom_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/logger_stated_boom_orientation_deg/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.logger_stated_boom_orientation_deg.type},message:"must be number,null"}];return false;}if(errors === _errs210){if((typeof data100 == "number") && (isFinite(data100))){if(data100 > 360 || isNaN(data100)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/logger_stated_boom_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/logger_stated_boom_orientation_deg/maximum",keyword:"maximum",params:{comparison: "<=", limit: 360},message:"must be <= 360"}];return false;}else {if(data100 < 0 || isNaN(data100)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/logger_stated_boom_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/logger_stated_boom_orientation_deg/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}}var valid19 = _errs210 === errors;}else {var valid19 = true;}if(valid19){if(data92.date_from !== undefined){let data101 = data92.date_from;const _errs212 = errors;if(errors === _errs212){if(errors === _errs212){if(typeof data101 === "string"){if(!(formats2.validate(data101))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/date_from/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/date_from/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid19 = _errs212 === errors;}else {var valid19 = true;}if(valid19){if(data92.date_to !== undefined){let data102 = data92.date_to;const _errs214 = errors;if((typeof data102 !== "string") && (data102 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/date_to/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.date_to.type},message:"must be string,null"}];return false;}if(errors === _errs214){if(errors === _errs214){if(typeof data102 === "string"){if(!(formats2.validate(data102))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/date_to/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid19 = _errs214 === errors;}else {var valid19 = true;}if(valid19){if(data92.notes !== undefined){let data103 = data92.notes;const _errs216 = errors;if((typeof data103 !== "string") && (data103 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/notes",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.notes.type},message:"must be string,null"}];return false;}var valid19 = _errs216 === errors;}else {var valid19 = true;}if(valid19){if(data92.update_at !== undefined){let data104 = data92.update_at;const _errs218 = errors;if((typeof data104 !== "string") && (data104 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs218){if(errors === _errs218){if(typeof data104 === "string"){if(!(formats2.validate(data104))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid19 = _errs218 === errors;}else {var valid19 = true;}if(valid19){if(data92.column_name !== undefined){let data105 = data92.column_name;const _errs220 = errors;if(errors === _errs220){if(Array.isArray(data105)){var valid20 = true;const len7 = data105.length;for(let i11=0; i11<len7; i11++){let data106 = data105[i11];const _errs222 = errors;if(errors === _errs222){if(data106 && typeof data106 == "object" && !Array.isArray(data106)){let missing5;if(((data106.column_name === undefined) && (missing5 = "column_name")) || ((data106.statistic_type_id === undefined) && (missing5 = "statistic_type_id"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];return false;}else {const _errs224 = errors;for(const key5 in data106){if(!(((((key5 === "column_name") || (key5 === "statistic_type_id")) || (key5 === "is_ignored")) || (key5 === "notes")) || (key5 === "update_at"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];return false;break;}}if(_errs224 === errors){if(data106.column_name !== undefined){const _errs225 = errors;if(typeof data106.column_name !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11+"/column_name",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/properties/column_name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid21 = _errs225 === errors;}else {var valid21 = true;}if(valid21){if(data106.statistic_type_id !== undefined){let data108 = data106.statistic_type_id;const _errs227 = errors;if(typeof data108 !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11+"/statistic_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/properties/statistic_type_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((((((((data108 === "avg") || (data108 === "sd")) || (data108 === "max")) || (data108 === "min")) || (data108 === "count")) || (data108 === "availability")) || (data108 === "quality")) || (data108 === "sum")) || (data108 === "median")) || (data108 === "mode")) || (data108 === "range")) || (data108 === "gust")) || (data108 === "ti")) || (data108 === "text"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11+"/statistic_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/properties/statistic_type_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.column_name.items.properties.statistic_type_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid21 = _errs227 === errors;}else {var valid21 = true;}if(valid21){if(data106.is_ignored !== undefined){const _errs229 = errors;if(typeof data106.is_ignored !== "boolean"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11+"/is_ignored",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/properties/is_ignored/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid21 = _errs229 === errors;}else {var valid21 = true;}if(valid21){if(data106.notes !== undefined){let data110 = data106.notes;const _errs231 = errors;if((typeof data110 !== "string") && (data110 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11+"/notes",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.column_name.items.properties.notes.type},message:"must be string,null"}];return false;}var valid21 = _errs231 === errors;}else {var valid21 = true;}if(valid21){if(data106.update_at !== undefined){let data111 = data106.update_at;const _errs233 = errors;if((typeof data111 !== "string") && (data111 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.logger_measurement_config.items.properties.column_name.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs233){if(errors === _errs233){if(typeof data111 === "string"){if(!(formats2.validate(data111))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid21 = _errs233 === errors;}else {var valid21 = true;}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name/" + i11,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid20 = _errs222 === errors;if(!valid20){break;}}if(valid20){let i12 = data105.length;let j4;if(i12 > 1){outer4:for(;i12--;){for(j4 = i12; j4--;){if(func0(data105[i12], data105[j4])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/uniqueItems",keyword:"uniqueItems",params:{i: i12, j: j4},message:"must NOT have duplicate items (items ## "+j4+" and "+i12+" are identical)"}];return false;break outer4;}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10+"/column_name",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/properties/column_name/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid19 = _errs220 === errors;}else {var valid19 = true;}}}}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config/" + i10,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid18 = _errs193 === errors;if(!valid18){break;}}if(valid18){let i13 = data91.length;let j5;if(i13 > 1){outer5:for(;i13--;){for(j5 = i13; j5--;){if(func0(data91[i13], data91[j5])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/uniqueItems",keyword:"uniqueItems",params:{i: i13, j: j5},message:"must NOT have duplicate items (items ## "+j5+" and "+i13+" are identical)"}];return false;break outer5;}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/logger_measurement_config",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/logger_measurement_config/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid17 = _errs191 === errors;}else {var valid17 = true;}if(valid17){if(data84.sensor !== undefined){let data112 = data84.sensor;const _errs235 = errors;if(errors === _errs235){if(Array.isArray(data112)){var valid24 = true;const len8 = data112.length;for(let i14=0; i14<len8; i14++){let data113 = data112[i14];const _errs237 = errors;if(errors === _errs237){if(data113 && typeof data113 == "object" && !Array.isArray(data113)){let missing6;if(((data113.date_from === undefined) && (missing6 = "date_from")) || ((data113.date_to === undefined) && (missing6 = "date_to"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];return false;}else {const _errs239 = errors;for(const key6 in data113){if(!(func2.call(schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties, key6))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"}];return false;break;}}if(_errs239 === errors){if(data113.oem !== undefined){let data114 = data113.oem;const _errs240 = errors;if((typeof data114 !== "string") && (data114 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/oem",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/oem/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.oem.type},message:"must be string,null"}];return false;}var valid25 = _errs240 === errors;}else {var valid25 = true;}if(valid25){if(data113.model !== undefined){let data115 = data113.model;const _errs242 = errors;if((typeof data115 !== "string") && (data115 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/model",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/model/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.model.type},message:"must be string,null"}];return false;}var valid25 = _errs242 === errors;}else {var valid25 = true;}if(valid25){if(data113.serial_number !== undefined){let data116 = data113.serial_number;const _errs244 = errors;if((typeof data116 !== "string") && (data116 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/serial_number",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/serial_number/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.serial_number.type},message:"must be string,null"}];return false;}var valid25 = _errs244 === errors;}else {var valid25 = true;}if(valid25){if(data113.sensor_type_id !== undefined){let data117 = data113.sensor_type_id;const _errs246 = errors;if((typeof data117 !== "string") && (data117 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/sensor_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/sensor_type_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.sensor_type_id.type},message:"must be string,null"}];return false;}if(!((((((((((((((((((((((((((((((data117 === "anemometer") || (data117 === "wind_vane")) || (data117 === "thermometer")) || (data117 === "barometer")) || (data117 === "hygrometer")) || (data117 === "thermohygrometer")) || (data117 === "voltmeter")) || (data117 === "ammeter")) || (data117 === "pyranometer")) || (data117 === "pyrheliometer")) || (data117 === "albedometer")) || (data117 === "2d_ultrasonic")) || (data117 === "3d_ultrasonic")) || (data117 === "vertical_anemometer")) || (data117 === "propeller_anemometer")) || (data117 === "gill_propeller")) || (data117 === "rain_gauge")) || (data117 === "ice_detection_sensor")) || (data117 === "fog_sensor")) || (data117 === "gps")) || (data117 === "illuminance_sensor")) || (data117 === "compass")) || (data117 === "solar_compass")) || (data117 === "inertial_measurement_unit")) || (data117 === "adcp")) || (data117 === "ctd")) || (data117 === "lidar")) || (data117 === "sodar")) || (data117 === "other")) || (data117 === null))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/sensor_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/sensor_type_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.sensor_type_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid25 = _errs246 === errors;}else {var valid25 = true;}if(valid25){if(data113.classification !== undefined){let data118 = data113.classification;const _errs248 = errors;if((typeof data118 !== "string") && (data118 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/classification",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/classification/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.classification.type},message:"must be string,null"}];return false;}if(errors === _errs248){if(typeof data118 === "string"){if(!pattern1.test(data118)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/classification",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/classification/pattern",keyword:"pattern",params:{pattern: "^([0-9]{1,2})[.]([0-9]{1,2})[ABCDS]$"},message:"must match pattern \""+"^([0-9]{1,2})[.]([0-9]{1,2})[ABCDS]$"+"\""}];return false;}}}var valid25 = _errs248 === errors;}else {var valid25 = true;}if(valid25){if(data113.instrument_poi_height_mm !== undefined){let data119 = data113.instrument_poi_height_mm;const _errs250 = errors;if((!((typeof data119 == "number") && (isFinite(data119)))) && (data119 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/instrument_poi_height_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/instrument_poi_height_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.instrument_poi_height_mm.type},message:"must be number,null"}];return false;}var valid25 = _errs250 === errors;}else {var valid25 = true;}if(valid25){if(data113.is_heated !== undefined){let data120 = data113.is_heated;const _errs252 = errors;if((typeof data120 !== "boolean") && (data120 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/is_heated",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/is_heated/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.is_heated.type},message:"must be boolean,null"}];return false;}var valid25 = _errs252 === errors;}else {var valid25 = true;}if(valid25){if(data113.sensor_body_size_mm !== undefined){let data121 = data113.sensor_body_size_mm;const _errs254 = errors;if((!((typeof data121 == "number") && (isFinite(data121)))) && (data121 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/sensor_body_size_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/sensor_body_size_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.sensor_body_size_mm.type},message:"must be number,null"}];return false;}var valid25 = _errs254 === errors;}else {var valid25 = true;}if(valid25){if(data113.date_from !== undefined){let data122 = data113.date_from;const _errs256 = errors;if(errors === _errs256){if(errors === _errs256){if(typeof data122 === "string"){if(!(formats2.validate(data122))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/date_from/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/date_from/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid25 = _errs256 === errors;}else {var valid25 = true;}if(valid25){if(data113.date_to !== undefined){let data123 = data113.date_to;const _errs258 = errors;if((typeof data123 !== "string") && (data123 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/date_to/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.date_to.type},message:"must be string,null"}];return false;}if(errors === _errs258){if(errors === _errs258){if(typeof data123 === "string"){if(!(formats2.validate(data123))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/date_to/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid25 = _errs258 === errors;}else {var valid25 = true;}if(valid25){if(data113.notes !== undefined){let data124 = data113.notes;const _errs260 = errors;if((typeof data124 !== "string") && (data124 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/notes",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.notes.type},message:"must be string,null"}];return false;}var valid25 = _errs260 === errors;}else {var valid25 = true;}if(valid25){if(data113.update_at !== undefined){let data125 = data113.update_at;const _errs262 = errors;if((typeof data125 !== "string") && (data125 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs262){if(errors === _errs262){if(typeof data125 === "string"){if(!(formats2.validate(data125))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid25 = _errs262 === errors;}else {var valid25 = true;}if(valid25){if(data113.calibration !== undefined){let data126 = data113.calibration;const _errs264 = errors;if((!(Array.isArray(data126))) && (data126 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.type},message:"must be array,null"}];return false;}if(errors === _errs264){if(Array.isArray(data126)){var valid26 = true;const len9 = data126.length;for(let i15=0; i15<len9; i15++){let data127 = data126[i15];const _errs266 = errors;if(errors === _errs266){if(data127 && typeof data127 == "object" && !Array.isArray(data127)){const _errs268 = errors;for(const key7 in data127){if(!(func2.call(schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties, key7))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"}];return false;break;}}if(_errs268 === errors){if(data127.measurement_type_id !== undefined){let data128 = data127.measurement_type_id;const _errs269 = errors;if(typeof data128 !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/measurement_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/measurement_type_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data128 === "wind_speed") || (data128 === "wind_direction")) || (data128 === "air_temperature")) || (data128 === "water_temperature")) || (data128 === "temperature")) || (data128 === "air_pressure")) || (data128 === "air_density")) || (data128 === "relative_humidity")) || (data128 === "voltage")) || (data128 === "current")) || (data128 === "resistance")) || (data128 === "power")) || (data128 === "energy")) || (data128 === "vertical_wind_speed")) || (data128 === "wind_speed_turbulence")) || (data128 === "precipitation")) || (data128 === "ice_detection")) || (data128 === "global_horizontal_irradiance")) || (data128 === "direct_normal_irradiance")) || (data128 === "diffuse_horizontal_irradiance")) || (data128 === "global_tilted_irradiance")) || (data128 === "global_normal_irradiance")) || (data128 === "albedo")) || (data128 === "soiling_loss_index")) || (data128 === "illuminance")) || (data128 === "fog")) || (data128 === "salinity")) || (data128 === "conductivity")) || (data128 === "pressure")) || (data128 === "gps_coordinates")) || (data128 === "status")) || (data128 === "flag")) || (data128 === "counter")) || (data128 === "availability")) || (data128 === "quality")) || (data128 === "carrier_to_noise_ratio")) || (data128 === "doppler_spectral_broadening")) || (data128 === "echo_intensity")) || (data128 === "signal_to_noise_ratio")) || (data128 === "motion_corrected_wind_speed")) || (data128 === "motion_corrected_wind_direction")) || (data128 === "motion_corrected_vertical_wind_speed")) || (data128 === "wave_height")) || (data128 === "wave_significant_height")) || (data128 === "wave_maximum_height")) || (data128 === "wave_direction")) || (data128 === "wave_directional_spread")) || (data128 === "wave_period")) || (data128 === "wave_peak_period")) || (data128 === "water_speed")) || (data128 === "vertical_water_speed")) || (data128 === "water_direction")) || (data128 === "orientation")) || (data128 === "compass_direction")) || (data128 === "true_north_offset")) || (data128 === "tilt")) || (data128 === "tilt_x")) || (data128 === "tilt_y")) || (data128 === "tilt_z")) || (data128 === "u")) || (data128 === "v")) || (data128 === "w")) || (data128 === "elevation")) || (data128 === "altitude")) || (data128 === "height")) || (data128 === "azimuth")) || (data128 === "water_level")) || (data128 === "depth")) || (data128 === "timestamp")) || (data128 === "other"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/measurement_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/measurement_type_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.measurement_type_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid27 = _errs269 === errors;}else {var valid27 = true;}if(valid27){if(data127.slope !== undefined){let data129 = data127.slope;const _errs271 = errors;if((!((typeof data129 == "number") && (isFinite(data129)))) && (data129 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/slope",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/slope/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.slope.type},message:"must be number,null"}];return false;}var valid27 = _errs271 === errors;}else {var valid27 = true;}if(valid27){if(data127.offset !== undefined){let data130 = data127.offset;const _errs273 = errors;if((!((typeof data130 == "number") && (isFinite(data130)))) && (data130 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/offset",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/offset/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.offset.type},message:"must be number,null"}];return false;}var valid27 = _errs273 === errors;}else {var valid27 = true;}if(valid27){if(data127.sensitivity !== undefined){let data131 = data127.sensitivity;const _errs275 = errors;if((!((typeof data131 == "number") && (isFinite(data131)))) && (data131 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/sensitivity",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/sensitivity/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.sensitivity.type},message:"must be number,null"}];return false;}var valid27 = _errs275 === errors;}else {var valid27 = true;}if(valid27){if(data127.report_file_name !== undefined){let data132 = data127.report_file_name;const _errs277 = errors;if((typeof data132 !== "string") && (data132 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/report_file_name",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/report_file_name/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.report_file_name.type},message:"must be string,null"}];return false;}var valid27 = _errs277 === errors;}else {var valid27 = true;}if(valid27){if(data127.report_link !== undefined){let data133 = data127.report_link;const _errs279 = errors;if((typeof data133 !== "string") && (data133 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/report_link",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/report_link/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.report_link.type},message:"must be string,null"}];return false;}var valid27 = _errs279 === errors;}else {var valid27 = true;}if(valid27){if(data127.calibration_id !== undefined){let data134 = data127.calibration_id;const _errs281 = errors;if((typeof data134 !== "string") && (data134 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.calibration_id.type},message:"must be string,null"}];return false;}var valid27 = _errs281 === errors;}else {var valid27 = true;}if(valid27){if(data127.date_of_calibration !== undefined){let data135 = data127.date_of_calibration;const _errs283 = errors;if((typeof data135 !== "string") && (data135 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/date_of_calibration",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/date_of_calibration/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.date_of_calibration.type},message:"must be string,null"}];return false;}if(errors === _errs283){if(errors === _errs283){if(typeof data135 === "string"){if(!(formats0.validate(data135))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/date_of_calibration",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/date_of_calibration/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""}];return false;}}}}var valid27 = _errs283 === errors;}else {var valid27 = true;}if(valid27){if(data127.revision !== undefined){let data136 = data127.revision;const _errs285 = errors;if((typeof data136 !== "string") && (data136 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/revision",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/revision/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.revision.type},message:"must be string,null"}];return false;}var valid27 = _errs285 === errors;}else {var valid27 = true;}if(valid27){if(data127.calibration_organisation !== undefined){let data137 = data127.calibration_organisation;const _errs287 = errors;if((typeof data137 !== "string") && (data137 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_organisation",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_organisation/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.calibration_organisation.type},message:"must be string,null"}];return false;}var valid27 = _errs287 === errors;}else {var valid27 = true;}if(valid27){if(data127.place_of_calibration !== undefined){let data138 = data127.place_of_calibration;const _errs289 = errors;if((typeof data138 !== "string") && (data138 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/place_of_calibration",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/place_of_calibration/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.place_of_calibration.type},message:"must be string,null"}];return false;}var valid27 = _errs289 === errors;}else {var valid27 = true;}if(valid27){if(data127.uncertainty_k_factor !== undefined){let data139 = data127.uncertainty_k_factor;const _errs291 = errors;if((!((typeof data139 == "number") && (isFinite(data139)))) && (data139 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/uncertainty_k_factor",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/uncertainty_k_factor/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.uncertainty_k_factor.type},message:"must be number,null"}];return false;}var valid27 = _errs291 === errors;}else {var valid27 = true;}if(valid27){if(data127.notes !== undefined){let data140 = data127.notes;const _errs293 = errors;if((typeof data140 !== "string") && (data140 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/notes",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.notes.type},message:"must be string,null"}];return false;}var valid27 = _errs293 === errors;}else {var valid27 = true;}if(valid27){if(data127.update_at !== undefined){let data141 = data127.update_at;const _errs295 = errors;if((typeof data141 !== "string") && (data141 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs295){if(errors === _errs295){if(typeof data141 === "string"){if(!(formats2.validate(data141))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid27 = _errs295 === errors;}else {var valid27 = true;}if(valid27){if(data127.calibration_uncertainty !== undefined){let data142 = data127.calibration_uncertainty;const _errs297 = errors;if((!(Array.isArray(data142))) && (data142 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_uncertainty",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_uncertainty/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.calibration_uncertainty.type},message:"must be array,null"}];return false;}if(errors === _errs297){if(Array.isArray(data142)){var valid28 = true;const len10 = data142.length;for(let i16=0; i16<len10; i16++){let data143 = data142[i16];const _errs299 = errors;if(errors === _errs299){if(data143 && typeof data143 == "object" && !Array.isArray(data143)){const _errs301 = errors;for(const key8 in data143){if(!(((key8 === "reference_bin") || (key8 === "reference_unit")) || (key8 === "combined_uncertainty"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_uncertainty/" + i16,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_uncertainty/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key8},message:"must NOT have additional properties"}];return false;break;}}if(_errs301 === errors){if(data143.reference_bin !== undefined){let data144 = data143.reference_bin;const _errs302 = errors;if((!((typeof data144 == "number") && (isFinite(data144)))) && (data144 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_uncertainty/" + i16+"/reference_bin",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_uncertainty/items/properties/reference_bin/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.calibration_uncertainty.items.properties.reference_bin.type},message:"must be number,null"}];return false;}var valid29 = _errs302 === errors;}else {var valid29 = true;}if(valid29){if(data143.reference_unit !== undefined){let data145 = data143.reference_unit;const _errs304 = errors;if((typeof data145 !== "string") && (data145 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_uncertainty/" + i16+"/reference_unit",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_uncertainty/items/properties/reference_unit/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.calibration_uncertainty.items.properties.reference_unit.type},message:"must be string,null"}];return false;}var valid29 = _errs304 === errors;}else {var valid29 = true;}if(valid29){if(data143.combined_uncertainty !== undefined){let data146 = data143.combined_uncertainty;const _errs306 = errors;if((!((typeof data146 == "number") && (isFinite(data146)))) && (data146 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_uncertainty/" + i16+"/combined_uncertainty",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_uncertainty/items/properties/combined_uncertainty/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.sensor.items.properties.calibration.items.properties.calibration_uncertainty.items.properties.combined_uncertainty.type},message:"must be number,null"}];return false;}var valid29 = _errs306 === errors;}else {var valid29 = true;}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_uncertainty/" + i16,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_uncertainty/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid28 = _errs299 === errors;if(!valid28){break;}}if(valid28){let i17 = data142.length;let j6;if(i17 > 1){outer6:for(;i17--;){for(j6 = i17; j6--;){if(func0(data142[i17], data142[j6])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15+"/calibration_uncertainty",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/properties/calibration_uncertainty/uniqueItems",keyword:"uniqueItems",params:{i: i17, j: j6},message:"must NOT have duplicate items (items ## "+j6+" and "+i17+" are identical)"}];return false;break outer6;}}}}}}}var valid27 = _errs297 === errors;}else {var valid27 = true;}}}}}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration/" + i15,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid26 = _errs266 === errors;if(!valid26){break;}}if(valid26){let i18 = data126.length;let j7;if(i18 > 1){outer7:for(;i18--;){for(j7 = i18; j7--;){if(func0(data126[i18], data126[j7])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14+"/calibration",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/properties/calibration/uniqueItems",keyword:"uniqueItems",params:{i: i18, j: j7},message:"must NOT have duplicate items (items ## "+j7+" and "+i18+" are identical)"}];return false;break outer7;}}}}}}}var valid25 = _errs264 === errors;}else {var valid25 = true;}}}}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor/" + i14,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid24 = _errs237 === errors;if(!valid24){break;}}if(valid24){let i19 = data112.length;let j8;if(i19 > 1){outer8:for(;i19--;){for(j8 = i19; j8--;){if(func0(data112[i19], data112[j8])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/uniqueItems",keyword:"uniqueItems",params:{i: i19, j: j8},message:"must NOT have duplicate items (items ## "+j8+" and "+i19+" are identical)"}];return false;break outer8;}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/sensor",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/sensor/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid17 = _errs235 === errors;}else {var valid17 = true;}if(valid17){if(data84.mounting_arrangement !== undefined){let data147 = data84.mounting_arrangement;const _errs308 = errors;if((!(Array.isArray(data147))) && (data147 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.type},message:"must be array,null"}];return false;}if(errors === _errs308){if(Array.isArray(data147)){var valid33 = true;const len11 = data147.length;for(let i20=0; i20<len11; i20++){let data148 = data147[i20];const _errs310 = errors;if(errors === _errs310){if(data148 && typeof data148 == "object" && !Array.isArray(data148)){let missing7;if(((data148.date_from === undefined) && (missing7 = "date_from")) || ((data148.date_to === undefined) && (missing7 = "date_to"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];return false;}else {const _errs312 = errors;for(const key9 in data148){if(!(func2.call(schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties, key9))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key9},message:"must NOT have additional properties"}];return false;break;}}if(_errs312 === errors){if(data148.mast_section_geometry_uuid !== undefined){let data149 = data148.mast_section_geometry_uuid;const _errs313 = errors;if((data149 !== null) && (typeof data149 !== "string")){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/mast_section_geometry_uuid",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/mast_section_geometry_uuid/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.mast_section_geometry_uuid.type},message:"must be null,string"}];return false;}if(errors === _errs313){if(errors === _errs313){if(typeof data149 === "string"){if(!(formats10.test(data149))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/mast_section_geometry_uuid",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/mast_section_geometry_uuid/format",keyword:"format",params:{format: "uuid"},message:"must match format \""+"uuid"+"\""}];return false;}}}}var valid34 = _errs313 === errors;}else {var valid34 = true;}if(valid34){if(data148.mounting_type_id !== undefined){let data150 = data148.mounting_type_id;const _errs315 = errors;if((typeof data150 !== "string") && (data150 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/mounting_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/mounting_type_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.mounting_type_id.type},message:"must be string,null"}];return false;}if(!((((data150 === "side") || (data150 === "goal_post")) || (data150 === "top")) || (data150 === null))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/mounting_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/mounting_type_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.mounting_type_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid34 = _errs315 === errors;}else {var valid34 = true;}if(valid34){if(data148.boom_orientation_deg !== undefined){let data151 = data148.boom_orientation_deg;const _errs317 = errors;if((!((typeof data151 == "number") && (isFinite(data151)))) && (data151 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_orientation_deg/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.boom_orientation_deg.type},message:"must be number,null"}];return false;}if(errors === _errs317){if((typeof data151 == "number") && (isFinite(data151))){if(data151 > 360 || isNaN(data151)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_orientation_deg/maximum",keyword:"maximum",params:{comparison: "<=", limit: 360},message:"must be <= 360"}];return false;}else {if(data151 < 0 || isNaN(data151)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_orientation_deg/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}}var valid34 = _errs317 === errors;}else {var valid34 = true;}if(valid34){if(data148.vane_dead_band_orientation_deg !== undefined){let data152 = data148.vane_dead_band_orientation_deg;const _errs319 = errors;if((!((typeof data152 == "number") && (isFinite(data152)))) && (data152 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/vane_dead_band_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/vane_dead_band_orientation_deg/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.vane_dead_band_orientation_deg.type},message:"must be number,null"}];return false;}if(errors === _errs319){if((typeof data152 == "number") && (isFinite(data152))){if(data152 > 360 || isNaN(data152)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/vane_dead_band_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/vane_dead_band_orientation_deg/maximum",keyword:"maximum",params:{comparison: "<=", limit: 360},message:"must be <= 360"}];return false;}else {if(data152 < 0 || isNaN(data152)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/vane_dead_band_orientation_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/vane_dead_band_orientation_deg/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}}var valid34 = _errs319 === errors;}else {var valid34 = true;}if(valid34){if(data148.orientation_reference_id !== undefined){let data153 = data148.orientation_reference_id;const _errs321 = errors;if((typeof data153 !== "string") && (data153 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/orientation_reference_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/orientation_reference_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.orientation_reference_id.type},message:"must be string,null"}];return false;}if(!((((data153 === "magnetic_north") || (data153 === "true_north")) || (data153 === "grid_north")) || (data153 === null))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/orientation_reference_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/orientation_reference_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.orientation_reference_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid34 = _errs321 === errors;}else {var valid34 = true;}if(valid34){if(data148.tilt_angle_deg !== undefined){let data154 = data148.tilt_angle_deg;const _errs323 = errors;if((!((typeof data154 == "number") && (isFinite(data154)))) && (data154 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/tilt_angle_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/tilt_angle_deg/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.tilt_angle_deg.type},message:"must be number,null"}];return false;}if(errors === _errs323){if((typeof data154 == "number") && (isFinite(data154))){if(data154 > 90 || isNaN(data154)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/tilt_angle_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/tilt_angle_deg/maximum",keyword:"maximum",params:{comparison: "<=", limit: 90},message:"must be <= 90"}];return false;}else {if(data154 < -90 || isNaN(data154)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/tilt_angle_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/tilt_angle_deg/minimum",keyword:"minimum",params:{comparison: ">=", limit: -90},message:"must be >= -90"}];return false;}}}}var valid34 = _errs323 === errors;}else {var valid34 = true;}if(valid34){if(data148.boom_oem !== undefined){let data155 = data148.boom_oem;const _errs325 = errors;if((typeof data155 !== "string") && (data155 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_oem",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_oem/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.boom_oem.type},message:"must be string,null"}];return false;}var valid34 = _errs325 === errors;}else {var valid34 = true;}if(valid34){if(data148.boom_model !== undefined){let data156 = data148.boom_model;const _errs327 = errors;if((typeof data156 !== "string") && (data156 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_model",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_model/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.boom_model.type},message:"must be string,null"}];return false;}var valid34 = _errs327 === errors;}else {var valid34 = true;}if(valid34){if(data148.upstand_height_mm !== undefined){let data157 = data148.upstand_height_mm;const _errs329 = errors;if((!((typeof data157 == "number") && (isFinite(data157)))) && (data157 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/upstand_height_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/upstand_height_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.upstand_height_mm.type},message:"must be number,null"}];return false;}if(errors === _errs329){if((typeof data157 == "number") && (isFinite(data157))){if(data157 < 0 || isNaN(data157)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/upstand_height_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/upstand_height_mm/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid34 = _errs329 === errors;}else {var valid34 = true;}if(valid34){if(data148.upstand_diameter_mm !== undefined){let data158 = data148.upstand_diameter_mm;const _errs331 = errors;if((!((typeof data158 == "number") && (isFinite(data158)))) && (data158 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/upstand_diameter_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/upstand_diameter_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.upstand_diameter_mm.type},message:"must be number,null"}];return false;}if(errors === _errs331){if((typeof data158 == "number") && (isFinite(data158))){if(data158 < 0 || isNaN(data158)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/upstand_diameter_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/upstand_diameter_mm/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid34 = _errs331 === errors;}else {var valid34 = true;}if(valid34){if(data148.boom_diameter_mm !== undefined){let data159 = data148.boom_diameter_mm;const _errs333 = errors;if((!((typeof data159 == "number") && (isFinite(data159)))) && (data159 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_diameter_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_diameter_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.boom_diameter_mm.type},message:"must be number,null"}];return false;}if(errors === _errs333){if((typeof data159 == "number") && (isFinite(data159))){if(data159 < 0 || isNaN(data159)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_diameter_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_diameter_mm/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid34 = _errs333 === errors;}else {var valid34 = true;}if(valid34){if(data148.boom_length_mm !== undefined){let data160 = data148.boom_length_mm;const _errs335 = errors;if((!((typeof data160 == "number") && (isFinite(data160)))) && (data160 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_length_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_length_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.boom_length_mm.type},message:"must be number,null"}];return false;}if(errors === _errs335){if((typeof data160 == "number") && (isFinite(data160))){if(data160 < 0 || isNaN(data160)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/boom_length_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/boom_length_mm/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid34 = _errs335 === errors;}else {var valid34 = true;}if(valid34){if(data148.distance_from_mast_to_sensor_mm !== undefined){let data161 = data148.distance_from_mast_to_sensor_mm;const _errs337 = errors;if((!((typeof data161 == "number") && (isFinite(data161)))) && (data161 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/distance_from_mast_to_sensor_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/distance_from_mast_to_sensor_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.distance_from_mast_to_sensor_mm.type},message:"must be number,null"}];return false;}if(errors === _errs337){if((typeof data161 == "number") && (isFinite(data161))){if(data161 < 0 || isNaN(data161)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/distance_from_mast_to_sensor_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/distance_from_mast_to_sensor_mm/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid34 = _errs337 === errors;}else {var valid34 = true;}if(valid34){if(data148.date_from !== undefined){let data162 = data148.date_from;const _errs339 = errors;if(errors === _errs339){if(errors === _errs339){if(typeof data162 === "string"){if(!(formats2.validate(data162))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/date_from/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/date_from/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid34 = _errs339 === errors;}else {var valid34 = true;}if(valid34){if(data148.date_to !== undefined){let data163 = data148.date_to;const _errs341 = errors;if((typeof data163 !== "string") && (data163 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/date_to/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.date_to.type},message:"must be string,null"}];return false;}if(errors === _errs341){if(errors === _errs341){if(typeof data163 === "string"){if(!(formats2.validate(data163))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/date_to/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid34 = _errs341 === errors;}else {var valid34 = true;}if(valid34){if(data148.notes !== undefined){let data164 = data148.notes;const _errs343 = errors;if((typeof data164 !== "string") && (data164 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/notes",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.notes.type},message:"must be string,null"}];return false;}var valid34 = _errs343 === errors;}else {var valid34 = true;}if(valid34){if(data148.update_at !== undefined){let data165 = data148.update_at;const _errs345 = errors;if((typeof data165 !== "string") && (data165 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.mounting_arrangement.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs345){if(errors === _errs345){if(typeof data165 === "string"){if(!(formats2.validate(data165))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid34 = _errs345 === errors;}else {var valid34 = true;}}}}}}}}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement/" + i20,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid33 = _errs310 === errors;if(!valid33){break;}}if(valid33){let i21 = data147.length;let j9;if(i21 > 1){outer9:for(;i21--;){for(j9 = i21; j9--;){if(func0(data147[i21], data147[j9])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/mounting_arrangement",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/mounting_arrangement/uniqueItems",keyword:"uniqueItems",params:{i: i21, j: j9},message:"must NOT have duplicate items (items ## "+j9+" and "+i21+" are identical)"}];return false;break outer9;}}}}}}}var valid17 = _errs308 === errors;}else {var valid17 = true;}if(valid17){if(data84.interference_structures !== undefined){let data166 = data84.interference_structures;const _errs347 = errors;if((!(Array.isArray(data166))) && (data166 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.type},message:"must be array,null"}];return false;}if(errors === _errs347){if(Array.isArray(data166)){var valid36 = true;const len12 = data166.length;for(let i22=0; i22<len12; i22++){let data167 = data166[i22];const _errs349 = errors;if(errors === _errs349){if(data167 && typeof data167 == "object" && !Array.isArray(data167)){let missing8;if(((data167.structure_type_id === undefined) && (missing8 = "structure_type_id")) || ((data167.date_from === undefined) && (missing8 = "date_from"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];return false;}else {const _errs351 = errors;for(const key10 in data167){if(!(func2.call(schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties, key10))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key10},message:"must NOT have additional properties"}];return false;break;}}if(_errs351 === errors){if(data167.structure_type_id !== undefined){let data168 = data167.structure_type_id;const _errs352 = errors;if(typeof data168 !== "string"){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/structure_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/structure_type_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((data168 === "lightning_finial") || (data168 === "aviation_light")) || (data168 === "guy_wires")) || (data168 === "other"))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/structure_type_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/structure_type_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.structure_type_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid37 = _errs352 === errors;}else {var valid37 = true;}if(valid37){if(data167.orientation_from_mast_centre_deg !== undefined){let data169 = data167.orientation_from_mast_centre_deg;const _errs354 = errors;if((!((typeof data169 == "number") && (isFinite(data169)))) && (data169 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/orientation_from_mast_centre_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/orientation_from_mast_centre_deg/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.orientation_from_mast_centre_deg.type},message:"must be number,null"}];return false;}if(errors === _errs354){if((typeof data169 == "number") && (isFinite(data169))){if(data169 > 360 || isNaN(data169)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/orientation_from_mast_centre_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/orientation_from_mast_centre_deg/maximum",keyword:"maximum",params:{comparison: "<=", limit: 360},message:"must be <= 360"}];return false;}else {if(data169 < 0 || isNaN(data169)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/orientation_from_mast_centre_deg",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/orientation_from_mast_centre_deg/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}}var valid37 = _errs354 === errors;}else {var valid37 = true;}if(valid37){if(data167.orientation_reference_id !== undefined){let data170 = data167.orientation_reference_id;const _errs356 = errors;if((typeof data170 !== "string") && (data170 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/orientation_reference_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/orientation_reference_id/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.orientation_reference_id.type},message:"must be string,null"}];return false;}if(!((((data170 === "magnetic_north") || (data170 === "true_north")) || (data170 === "grid_north")) || (data170 === null))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/orientation_reference_id",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/orientation_reference_id/enum",keyword:"enum",params:{allowedValues: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.orientation_reference_id.enum},message:"must be equal to one of the allowed values"}];return false;}var valid37 = _errs356 === errors;}else {var valid37 = true;}if(valid37){if(data167.distance_from_mast_centre_mm !== undefined){let data171 = data167.distance_from_mast_centre_mm;const _errs358 = errors;if((!((typeof data171 == "number") && (isFinite(data171)))) && (data171 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/distance_from_mast_centre_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/distance_from_mast_centre_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.distance_from_mast_centre_mm.type},message:"must be number,null"}];return false;}var valid37 = _errs358 === errors;}else {var valid37 = true;}if(valid37){if(data167.diameter_of_interference_structure_mm !== undefined){let data172 = data167.diameter_of_interference_structure_mm;const _errs360 = errors;if((!((typeof data172 == "number") && (isFinite(data172)))) && (data172 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/diameter_of_interference_structure_mm",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/diameter_of_interference_structure_mm/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.diameter_of_interference_structure_mm.type},message:"must be number,null"}];return false;}var valid37 = _errs360 === errors;}else {var valid37 = true;}if(valid37){if(data167.date_from !== undefined){let data173 = data167.date_from;const _errs362 = errors;if(errors === _errs362){if(errors === _errs362){if(typeof data173 === "string"){if(!(formats2.validate(data173))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/date_from/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/date_from",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/date_from/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid37 = _errs362 === errors;}else {var valid37 = true;}if(valid37){if(data167.date_to !== undefined){let data174 = data167.date_to;const _errs364 = errors;if((typeof data174 !== "string") && (data174 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/date_to/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.date_to.type},message:"must be string,null"}];return false;}if(errors === _errs364){if(errors === _errs364){if(typeof data174 === "string"){if(!(formats2.validate(data174))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/date_to",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/date_to/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid37 = _errs364 === errors;}else {var valid37 = true;}if(valid37){if(data167.notes !== undefined){let data175 = data167.notes;const _errs366 = errors;if((typeof data175 !== "string") && (data175 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/notes",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/notes/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.notes.type},message:"must be string,null"}];return false;}var valid37 = _errs366 === errors;}else {var valid37 = true;}if(valid37){if(data167.update_at !== undefined){let data176 = data167.update_at;const _errs368 = errors;if((typeof data176 !== "string") && (data176 !== null)){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/update_at/type",keyword:"type",params:{type: schema11.properties.measurement_location.items.properties.measurement_point.items.properties.interference_structures.items.properties.update_at.type},message:"must be string,null"}];return false;}if(errors === _errs368){if(errors === _errs368){if(typeof data176 === "string"){if(!(formats2.validate(data176))){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22+"/update_at",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/properties/update_at/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}}}var valid37 = _errs368 === errors;}else {var valid37 = true;}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures/" + i22,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid36 = _errs349 === errors;if(!valid36){break;}}if(valid36){let i23 = data166.length;let j10;if(i23 > 1){outer10:for(;i23--;){for(j10 = i23; j10--;){if(func0(data166[i23], data166[j10])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9+"/interference_structures",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/properties/interference_structures/uniqueItems",keyword:"uniqueItems",params:{i: i23, j: j10},message:"must NOT have duplicate items (items ## "+j10+" and "+i23+" are identical)"}];return false;break outer10;}}}}}}}var valid17 = _errs347 === errors;}else {var valid17 = true;}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point/" + i9,schemaPath:"#/properties/measurement_location/items/properties/measurement_point/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid16 = _errs176 === errors;if(!valid16){break;}}if(valid16){let i24 = data83.length;let j11;if(i24 > 1){outer11:for(;i24--;){for(j11 = i24; j11--;){if(func0(data83[i24], data83[j11])){validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/uniqueItems",keyword:"uniqueItems",params:{i: i24, j: j11},message:"must NOT have duplicate items (items ## "+j11+" and "+i24+" are identical)"}];return false;break outer11;}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0+"/measurement_point",schemaPath:"#/properties/measurement_location/items/properties/measurement_point/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid2 = _errs174 === errors;}else {var valid2 = true;}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location/" + i0,schemaPath:"#/properties/measurement_location/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs16 === errors;if(!valid1){break;}}if(valid1){let i25 = data6.length;let j12;if(i25 > 1){outer12:for(;i25--;){for(j12 = i25; j12--;){if(func0(data6[i25], data6[j12])){validate10.errors = [{instancePath:instancePath+"/measurement_location",schemaPath:"#/properties/measurement_location/uniqueItems",keyword:"uniqueItems",params:{i: i25, j: j12},message:"must NOT have duplicate items (items ## "+j12+" and "+i25+" are identical)"}];return false;break outer12;}}}}}}else {validate10.errors = [{instancePath:instancePath+"/measurement_location",schemaPath:"#/properties/measurement_location/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;}